// This file is auto-generated by @hey-api/openapi-ts

export type CodeChannel = string;

export type DefaultError = unknown;

/**
 * A Duration represents the elapsed time between two instants
 * as an int64 nanosecond count. The representation limits the
 * largest representable duration to approximately 290 years.
 */
export type Duration = number;

export type Id = number;

/**
 * JSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger.
 */
export type JsonRawMessage = {
    [key: string]: unknown;
};

export type NullBool = boolean | null;

export type NullInt = number | null;

export type NullString = string | null;

export type NullTime = string | null;

export type NullUuid = string | null;

/**
 * OAuth2Client OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
 */
export type OAuth2Client = {
    /**
     * OAuth 2.0 Access Token Strategy  AccessTokenStrategy is the strategy used to generate access tokens. Valid options are `jwt` and `opaque`. `jwt` is a bad idea, see https://www.ory.sh/docs/hydra/advanced#json-web-tokens Setting the stragegy here overrides the global setting in `strategies.access_token`.
     */
    access_token_strategy?: string;
    allowed_cors_origins?: Array<string>;
    audience?: Array<string>;
    /**
     * Specify a time duration in milliseconds, seconds, minutes, hours.
     */
    authorization_code_grant_access_token_lifespan?: string;
    /**
     * Specify a time duration in milliseconds, seconds, minutes, hours.
     */
    authorization_code_grant_id_token_lifespan?: string;
    /**
     * Specify a time duration in milliseconds, seconds, minutes, hours.
     */
    authorization_code_grant_refresh_token_lifespan?: string;
    /**
     * OpenID Connect Back-Channel Logout Session Required  Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
     */
    backchannel_logout_session_required?: boolean;
    /**
     * OpenID Connect Back-Channel Logout URI  RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
     */
    backchannel_logout_uri?: string;
    /**
     * Specify a time duration in milliseconds, seconds, minutes, hours.
     */
    client_credentials_grant_access_token_lifespan?: string;
    /**
     * OAuth 2.0 Client ID  The ID is immutable. If no ID is provided, a UUID4 will be generated.
     */
    client_id?: string;
    /**
     * OAuth 2.0 Client Name  The human-readable name of the client to be presented to the end-user during authorization.
     */
    client_name?: string;
    /**
     * OAuth 2.0 Client Secret  The secret will be included in the create request as cleartext, and then never again. The secret is kept in hashed format and is not recoverable once lost.
     */
    client_secret?: string;
    /**
     * OAuth 2.0 Client Secret Expires At  The field is currently not supported and its value is always 0.
     */
    client_secret_expires_at?: number;
    /**
     * OAuth 2.0 Client URI  ClientURI is a URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
     */
    client_uri?: string;
    contacts?: Array<string>;
    /**
     * OAuth 2.0 Client Creation Date  CreatedAt returns the timestamp of the client's creation.
     */
    created_at?: string;
    /**
     * OpenID Connect Front-Channel Logout Session Required  Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
     */
    frontchannel_logout_session_required?: boolean;
    /**
     * OpenID Connect Front-Channel Logout URI  RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
     */
    frontchannel_logout_uri?: string;
    grant_types?: Array<string>;
    /**
     * Specify a time duration in milliseconds, seconds, minutes, hours.
     */
    implicit_grant_access_token_lifespan?: string;
    /**
     * Specify a time duration in milliseconds, seconds, minutes, hours.
     */
    implicit_grant_id_token_lifespan?: string;
    /**
     * OAuth 2.0 Client JSON Web Key Set  Client's JSON Web Key Set [JWK] document, passed by value. The semantics of the jwks parameter are the same as the jwks_uri parameter, other than that the JWK Set is passed by value, rather than by reference. This parameter is intended only to be used by Clients that, for some reason, are unable to use the jwks_uri parameter, for instance, by native applications that might not have a location to host the contents of the JWK Set. If a Client can use jwks_uri, it MUST NOT use jwks. One significant downside of jwks is that it does not enable key rotation (which jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 [OpenID.Core]). The jwks_uri and jwks parameters MUST NOT be used together.
     */
    jwks?: unknown;
    /**
     * OAuth 2.0 Client JSON Web Key Set URL  URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
     */
    jwks_uri?: string;
    /**
     * Specify a time duration in milliseconds, seconds, minutes, hours.
     */
    jwt_bearer_grant_access_token_lifespan?: string;
    /**
     * OAuth 2.0 Client Logo URI  A URL string referencing the client's logo.
     */
    logo_uri?: string;
    metadata?: unknown;
    /**
     * OAuth 2.0 Client Owner  Owner is a string identifying the owner of the OAuth 2.0 Client.
     */
    owner?: string;
    /**
     * OAuth 2.0 Client Policy URI  PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
     */
    policy_uri?: string;
    post_logout_redirect_uris?: Array<string>;
    redirect_uris?: Array<string>;
    /**
     * Specify a time duration in milliseconds, seconds, minutes, hours.
     */
    refresh_token_grant_access_token_lifespan?: string;
    /**
     * Specify a time duration in milliseconds, seconds, minutes, hours.
     */
    refresh_token_grant_id_token_lifespan?: string;
    /**
     * Specify a time duration in milliseconds, seconds, minutes, hours.
     */
    refresh_token_grant_refresh_token_lifespan?: string;
    /**
     * OpenID Connect Dynamic Client Registration Access Token  RegistrationAccessToken can be used to update, get, or delete the OAuth2 Client. It is sent when creating a client using Dynamic Client Registration.
     */
    registration_access_token?: string;
    /**
     * OpenID Connect Dynamic Client Registration URL  RegistrationClientURI is the URL used to update, get, or delete the OAuth2 Client.
     */
    registration_client_uri?: string;
    /**
     * OpenID Connect Request Object Signing Algorithm  JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
     */
    request_object_signing_alg?: string;
    request_uris?: Array<string>;
    response_types?: Array<string>;
    /**
     * OAuth 2.0 Client Scope  Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
     */
    scope?: string;
    /**
     * OpenID Connect Sector Identifier URI  URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
     */
    sector_identifier_uri?: string;
    /**
     * SkipConsent skips the consent screen for this client. This field can only be set from the admin API.
     */
    skip_consent?: boolean;
    /**
     * SkipLogoutConsent skips the logout consent screen for this client. This field can only be set from the admin API.
     */
    skip_logout_consent?: boolean;
    /**
     * OpenID Connect Subject Type  The `subject_types_supported` Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.
     */
    subject_type?: string;
    /**
     * OAuth 2.0 Token Endpoint Authentication Method  Requested Client Authentication method for the Token Endpoint. The options are:  `client_secret_basic`: (default) Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` encoded in the HTTP Authorization header. `client_secret_post`: Send `client_id` and `client_secret` as `application/x-www-form-urlencoded` in the HTTP body. `private_key_jwt`: Use JSON Web Tokens to authenticate the client. `none`: Used for public clients (native apps, mobile apps) which can not have secrets.
     */
    token_endpoint_auth_method?: string;
    /**
     * OAuth 2.0 Token Endpoint Signing Algorithm  Requested Client Authentication signing algorithm for the Token Endpoint.
     */
    token_endpoint_auth_signing_alg?: string;
    /**
     * OAuth 2.0 Client Terms of Service URI  A URL string pointing to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
     */
    tos_uri?: string;
    /**
     * OAuth 2.0 Client Last Update Date  UpdatedAt returns the timestamp of the last update.
     */
    updated_at?: string;
    /**
     * OpenID Connect Request Userinfo Signed Response Algorithm  JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
     */
    userinfo_signed_response_alg?: string;
};

/**
 * OAuth2ConsentRequestOpenIDConnectContext struct for OAuth2ConsentRequestOpenIDConnectContext
 */
export type OAuth2ConsentRequestOpenIdConnectContext = {
    /**
     * ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.  OpenID Connect defines it as follows: > Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.
     */
    acr_values?: Array<string>;
    /**
     * Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode. popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over. touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface. wap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \"feature phone\" type display.  The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.
     */
    display?: string;
    /**
     * IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the End-User's current or past authenticated session with the Client.
     */
    id_token_hint_claims?: {
        [key: string]: unknown;
    };
    /**
     * LoginHint hints about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is optional.
     */
    login_hint?: string;
    /**
     * UILocales is the End-User'id preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.
     */
    ui_locales?: Array<string>;
};

export type OAuth2LoginChallengeParams = {
    [key: string]: unknown;
};

/**
 * OAuth2LoginRequest struct for OAuth2LoginRequest
 */
export type OAuth2LoginRequest = {
    /**
     * ID is the identifier (\"login challenge\") of the login request. It is used to identify the session.
     */
    challenge?: string;
    client?: OAuth2Client;
    oidc_context?: OAuth2ConsentRequestOpenIdConnectContext;
    /**
     * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
     */
    request_url?: string;
    requested_access_token_audience?: Array<string>;
    requested_scope?: Array<string>;
    /**
     * SessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It's value can generally be used to associate consecutive login requests by a certain user.
     */
    session_id?: string;
    /**
     * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.  This feature allows you to update / set session information.
     */
    skip?: boolean;
    /**
     * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. If this value is set and `skip` is true, you MUST include this subject type when accepting the login request, or the request will fail.
     */
    subject?: string;
};

export type Provider = {
    /**
     * The RP's client identifier, issued by the IdP.
     */
    client_id?: string;
    /**
     * A full path of the IdP config file.
     */
    config_url?: string;
    /**
     * By specifying one of domain_hints values provided by the accounts endpoints,
     * the FedCM dialog selectively shows the specified account.
     */
    domain_hint?: string;
    /**
     * Array of strings that specifies the user information ("name", " email",
     * "picture") that RP needs IdP to share with them.
     *
     * Note: Field API is supported by Chrome 132 and later.
     */
    fields?: Array<string>;
    /**
     * By specifying one of login_hints values provided by the accounts endpoints,
     * the FedCM dialog selectively shows the specified account.
     */
    login_hint?: string;
    /**
     * A random string to ensure the response is issued for this specific request.
     * Prevents replay attacks.
     */
    nonce?: string;
    /**
     * Custom object that allows to specify additional key-value parameters:
     * scope: A string value containing additional permissions that RP needs to
     * request, for example " drive.readonly calendar.readonly"
     * nonce: A random string to ensure the response is issued for this specific
     * request. Prevents replay attacks.
     *
     * Other custom key-value parameters.
     *
     * Note: parameters is supported from Chrome 132.
     */
    parameters?: {
        [key: string]: string;
    };
};

/**
 * RecoveryAddressType must not exceed 16 characters as that is the limitation in the SQL Schema.
 */
export type RecoveryAddressType = string;

export type Time = string;

export type Uuid = string;

export type UpdateFedcmFlowBody = {
    /**
     * CSRFToken is the anti-CSRF token.
     */
    csrf_token: string;
    /**
     * Nonce is the nonce that was used in the `navigator.credentials.get` call. If
     * specified, it must match the `nonce` claim in the token.
     */
    nonce?: string;
    /**
     * Token contains the result of `navigator.credentials.get`.
     */
    token: string;
};

/**
 * Authenticator Assurance Level (AAL)
 * The authenticator assurance level can be one of "aal1", "aal2", or "aal3". A higher number means that it is harder
 * for an attacker to compromise the account.
 *
 * Generally, "aal1" implies that one authentication factor was used while AAL2 implies that two factors (e.g.
 * password + TOTP) have been used.
 *
 * To learn more about these levels please head over to: https://www.ory.sh/kratos/docs/concepts/credentials
 */
export type AuthenticatorAssuranceLevel = 'aal0' | 'aal1' | 'aal2' | 'aal3';

/**
 * Patch identities response
 */
export type BatchPatchIdentitiesResponse = {
    /**
     * The patch responses for the individual identities.
     */
    identities?: Array<IdentityPatchResponse>;
};

/**
 * Control API consistency guarantees
 */
export type ConsistencyRequestParameters = {
    /**
     * Read Consistency Level (preview)
     *
     * The read consistency level determines the consistency guarantee for reads:
     *
     * strong (slow): The read is guaranteed to return the most recent data committed at the start of the read.
     * eventual (very fast): The result will return data that is about 4.8 seconds old.
     *
     * The default consistency guarantee can be changed in the Ory Network Console or using the Ory CLI with
     * `ory patch project --replace '/previews/default_read_consistency_level="strong"'`.
     *
     * Setting the default consistency level to `eventual` may cause regressions in the future as we add consistency
     * controls to more APIs. Currently, the following APIs will be affected by this setting:
     *
     * `GET /admin/identities`
     *
     * This feature is in preview and only available in Ory Network.
     * ConsistencyLevelUnset  ConsistencyLevelUnset is the unset / default consistency level.
     * strong ConsistencyLevelStrong  ConsistencyLevelStrong is the strong consistency level.
     * eventual ConsistencyLevelEventual  ConsistencyLevelEventual is the eventual consistency level using follower read timestamps.
     */
    consistency?: '' | 'strong' | 'eventual';
};

export type ContinueWith = ({
    action: 'show_verification_ui';
} & ContinueWithVerificationUi) | ({
    action: 'set_ory_session_token';
} & ContinueWithSetOrySessionToken) | ({
    action: 'show_settings_ui';
} & ContinueWithSettingsUi) | ({
    action: 'show_recovery_ui';
} & ContinueWithRecoveryUi) | ({
    action: 'redirect_browser_to';
} & ContinueWithRedirectBrowserTo);

/**
 * Indicates, that the UI flow could be continued by showing a recovery ui
 */
export type ContinueWithRecoveryUi = {
    /**
     * Action will always be `show_recovery_ui`
     * show_recovery_ui ContinueWithActionShowRecoveryUIString
     */
    action: 'show_recovery_ui';
    flow: ContinueWithRecoveryUiFlow;
};

export type ContinueWithRecoveryUiFlow = {
    /**
     * The ID of the recovery flow
     */
    id: string;
    /**
     * The URL of the recovery flow
     *
     * If this value is set, redirect the user's browser to this URL. This value is typically unset for native clients / API flows.
     */
    url?: string;
};

/**
 * Indicates, that the UI flow could be continued by showing a recovery ui
 */
export type ContinueWithRedirectBrowserTo = {
    /**
     * Action will always be `redirect_browser_to`
     * redirect_browser_to ContinueWithActionRedirectBrowserToString
     */
    action: 'redirect_browser_to';
    /**
     * The URL to redirect the browser to
     */
    redirect_browser_to: string;
};

/**
 * Indicates that a session was issued, and the application should use this token for authenticated requests
 */
export type ContinueWithSetOrySessionToken = {
    /**
     * Action will always be `set_ory_session_token`
     * set_ory_session_token ContinueWithActionSetOrySessionTokenString
     */
    action: 'set_ory_session_token';
    /**
     * Token is the token of the session
     */
    ory_session_token: string;
};

/**
 * Indicates, that the UI flow could be continued by showing a settings ui
 */
export type ContinueWithSettingsUi = {
    /**
     * Action will always be `show_settings_ui`
     * show_settings_ui ContinueWithActionShowSettingsUIString
     */
    action: 'show_settings_ui';
    flow: ContinueWithSettingsUiFlow;
};

export type ContinueWithSettingsUiFlow = {
    /**
     * The ID of the settings flow
     */
    id: string;
    /**
     * The URL of the settings flow
     *
     * If this value is set, redirect the user's browser to this URL. This value is typically unset for native clients / API flows.
     */
    url?: string;
};

/**
 * Indicates, that the UI flow could be continued by showing a verification ui
 */
export type ContinueWithVerificationUi = {
    /**
     * Action will always be `show_verification_ui`
     * show_verification_ui ContinueWithActionShowVerificationUIString
     */
    action: 'show_verification_ui';
    flow: ContinueWithVerificationUiFlow;
};

export type ContinueWithVerificationUiFlow = {
    /**
     * The ID of the verification flow
     */
    id: string;
    /**
     * The URL of the verification flow
     *
     * If this value is set, redirect the user's browser to this URL. This value is typically unset for native clients / API flows.
     */
    url?: string;
    /**
     * The address that should be verified in this flow
     */
    verifiable_address: string;
};

/**
 * A Message's Status
 */
export type CourierMessageStatus = 'queued' | 'sent' | 'processing' | 'abandoned';

/**
 * A Message's Type
 * It can either be `email` or `phone`
 */
export type CourierMessageType = 'email' | 'phone';

/**
 * CreateFedcmFlowResponse
 * Contains a list of all available FedCM providers.
 */
export type CreateFedcmFlowResponse = {
    csrf_token?: string;
    providers?: Array<Provider>;
};

/**
 * Create Identity Body
 */
export type CreateIdentityBody = {
    credentials?: IdentityWithCredentials;
    /**
     * Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`.
     */
    metadata_admin?: unknown;
    /**
     * Store metadata about the identity which the identity itself can see when calling for example the
     * session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
     */
    metadata_public?: unknown;
    organization_id?: NullUuid;
    /**
     * RecoveryAddresses contains all the addresses that can be used to recover an identity.
     *
     * Use this structure to import recovery addresses for an identity. Please keep in mind
     * that the address needs to be represented in the Identity Schema or this field will be overwritten
     * on the next identity update.
     */
    recovery_addresses?: Array<RecoveryIdentityAddress>;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.
     */
    schema_id: string;
    /**
     * State is the identity's state.
     * active StateActive
     * inactive StateInactive
     */
    state?: 'active' | 'inactive';
    /**
     * Traits represent an identity's traits. The identity is able to create, modify, and delete traits
     * in a self-service manner. The input will always be validated against the JSON Schema defined
     * in `schema_url`.
     */
    traits: {
        [key: string]: unknown;
    };
    /**
     * VerifiableAddresses contains all the addresses that can be verified by the user.
     *
     * Use this structure to import verified addresses for an identity. Please keep in mind
     * that the address needs to be represented in the Identity Schema or this field will be overwritten
     * on the next identity update.
     */
    verifiable_addresses?: Array<VerifiableIdentityAddress>;
};

/**
 * Create Recovery Code for Identity Request Body
 */
export type CreateRecoveryCodeForIdentityBody = {
    /**
     * Code Expires In
     *
     * The recovery code will expire after that amount of time has passed. Defaults to the configuration value of
     * `selfservice.methods.code.config.lifespan`.
     */
    expires_in?: string;
    flow_type?: SelfServiceFlowType;
    /**
     * Identity to Recover
     *
     * The identity's ID you wish to recover.
     */
    identity_id: string;
};

/**
 * Create Recovery Link for Identity Request Body
 */
export type CreateRecoveryLinkForIdentityBody = {
    /**
     * Link Expires In
     *
     * The recovery link will expire after that amount of time has passed. Defaults to the configuration value of
     * `selfservice.methods.code.config.lifespan`.
     */
    expires_in?: string;
    /**
     * Identity to Recover
     *
     * The identity's ID you wish to recover.
     */
    identity_id: string;
};

/**
 * Deleted Session Count
 */
export type DeleteMySessionsCount = {
    /**
     * The number of sessions that were revoked.
     */
    count?: number;
};

/**
 * Is returned when an active session was found but the requested AAL is not satisfied.
 */
export type ErrorAuthenticatorAssuranceLevelNotSatisfied = {
    error?: GenericError;
    /**
     * Points to where to redirect the user to next.
     */
    redirect_browser_to?: string;
};

/**
 * Is sent when a flow requires a browser to change its location.
 */
export type ErrorBrowserLocationChangeRequired = {
    error?: ErrorGeneric;
    /**
     * Points to where to redirect the user to next.
     */
    redirect_browser_to?: string;
};

/**
 * Is sent when a flow is replaced by a different flow of the same class
 */
export type ErrorFlowReplaced = {
    error?: GenericError;
    /**
     * The flow ID that should be used for the new flow as it contains the correct messages.
     */
    use_flow_id?: string;
};

/**
 * JSON API Error Response
 * The standard Ory JSON API error format.
 */
export type ErrorGeneric = {
    error: GenericError;
};

export type FlowError = {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     */
    created_at?: string;
    error?: {
        [key: string]: unknown;
    };
    /**
     * ID of the error container.
     */
    id: string;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     */
    updated_at?: string;
};

export type GenericError = {
    /**
     * The status code
     */
    code?: number;
    /**
     * Debug information
     *
     * This field is often not exposed to protect against leaking
     * sensitive information.
     */
    debug?: string;
    /**
     * Further error details
     */
    details?: {
        [key: string]: never;
    };
    /**
     * The error ID
     *
     * Useful when trying to identify various errors in application logic.
     */
    id?: string;
    /**
     * Error message
     *
     * The error's message.
     */
    message: string;
    /**
     * A human-readable reason for the error
     */
    reason?: string;
    /**
     * The request ID
     *
     * The request ID is often exposed internally in order to trace
     * errors across service architectures. This is often a UUID.
     */
    request?: string;
    /**
     * The status description
     */
    status?: string;
};

/**
 * The not ready status of the service.
 */
export type HealthNotReadyStatus = {
    /**
     * Errors contains a list of errors that caused the not ready status.
     */
    errors?: {
        [key: string]: string;
    };
};

/**
 * The health status of the service.
 */
export type HealthStatus = {
    /**
     * Status always contains "ok".
     */
    status?: string;
};

/**
 * Identity represents an Ory Kratos identity
 * An [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) represents a (human) user in Ory.
 */
export type Identity = {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     */
    created_at?: string;
    /**
     * Credentials represents all credentials that can be used for authenticating this identity.
     */
    credentials?: {
        [key: string]: IdentityCredentials;
    };
    /**
     * ID is the identity's unique identifier.
     *
     * The Identity ID can not be changed and can not be chosen. This ensures future
     * compatibility and optimization for distributed stores such as CockroachDB.
     */
    id: string;
    metadata_admin?: NullJsonRawMessage;
    metadata_public?: NullJsonRawMessage;
    organization_id?: NullUuid;
    /**
     * RecoveryAddresses contains all the addresses that can be used to recover an identity.
     */
    recovery_addresses?: Array<RecoveryIdentityAddress>;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.
     */
    schema_id: string;
    /**
     * SchemaURL is the URL of the endpoint where the identity's traits schema can be fetched from.
     *
     * format: url
     */
    schema_url: string;
    /**
     * State is the identity's state.
     *
     * This value has currently no effect.
     * active StateActive
     * inactive StateInactive
     */
    state?: 'active' | 'inactive';
    state_changed_at?: NullTime2;
    traits: IdentityTraits;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     */
    updated_at?: string;
    /**
     * VerifiableAddresses contains all the addresses that can be verified by the user.
     */
    verifiable_addresses?: Array<VerifiableIdentityAddress>;
};

/**
 * Credentials represents a specific credential type
 */
export type IdentityCredentials = {
    config?: JsonRawMessage;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     */
    created_at?: string;
    /**
     * Identifiers represents a list of unique identifiers this credential type matches.
     */
    identifiers?: Array<string>;
    /**
     * Type discriminates between different types of credentials.
     * password CredentialsTypePassword
     * oidc CredentialsTypeOIDC
     * totp CredentialsTypeTOTP
     * lookup_secret CredentialsTypeLookup
     * webauthn CredentialsTypeWebAuthn
     * code CredentialsTypeCodeAuth
     * passkey CredentialsTypePasskey
     * profile CredentialsTypeProfile
     * saml CredentialsTypeSAML
     * link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
     * code_recovery CredentialsTypeRecoveryCode
     */
    type?: 'password' | 'oidc' | 'totp' | 'lookup_secret' | 'webauthn' | 'code' | 'passkey' | 'profile' | 'saml' | 'link_recovery' | 'code_recovery';
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     */
    updated_at?: string;
    /**
     * Version refers to the version of the credential. Useful when changing the config schema.
     */
    version?: number;
};

/**
 * CredentialsCode represents a one time login/registration code
 */
export type IdentityCredentialsCode = {
    addresses?: Array<IdentityCredentialsCodeAddress>;
};

export type IdentityCredentialsCodeAddress = {
    /**
     * The address for this code
     */
    address?: string;
    channel?: CodeChannel;
};

/**
 * CredentialsOIDC is contains the configuration for credentials of the type oidc.
 */
export type IdentityCredentialsOidc = {
    providers?: Array<IdentityCredentialsOidcProvider>;
};

/**
 * CredentialsOIDCProvider is contains a specific OpenID COnnect credential for a particular connection (e.g. Google).
 */
export type IdentityCredentialsOidcProvider = {
    initial_access_token?: string;
    initial_id_token?: string;
    initial_refresh_token?: string;
    organization?: string;
    provider?: string;
    subject?: string;
    use_auto_link?: boolean;
};

/**
 * CredentialsPassword is contains the configuration for credentials of the type password.
 */
export type IdentityCredentialsPassword = {
    /**
     * HashedPassword is a hash-representation of the password.
     */
    hashed_password?: string;
    /**
     * UsePasswordMigrationHook is set to true if the password should be migrated
     * using the password migration hook. If set, and the HashedPassword is empty, a
     * webhook will be called during login to migrate the password.
     */
    use_password_migration_hook?: boolean;
};

/**
 * Payload for patching an identity
 */
export type IdentityPatch = {
    create?: CreateIdentityBody;
    /**
     * The ID of this patch.
     *
     * The patch ID is optional. If specified, the ID will be returned in the
     * response, so consumers of this API can correlate the response with the
     * patch.
     */
    patch_id?: string;
};

/**
 * Response for a single identity patch
 */
export type IdentityPatchResponse = {
    /**
     * The action for this specific patch
     * create ActionCreate  Create this identity.
     * error ActionError  Error indicates that the patch failed.
     */
    action?: 'create' | 'error';
    error?: DefaultError;
    /**
     * The identity ID payload of this patch
     */
    identity?: string;
    /**
     * The ID of this patch response, if an ID was specified in the patch.
     */
    patch_id?: string;
};

/**
 * Raw JSON Schema
 */
export type IdentitySchema = {
    [key: string]: unknown;
};

/**
 * An Identity JSON Schema Container
 */
export type IdentitySchemaContainer = {
    /**
     * The ID of the Identity JSON Schema
     */
    id?: string;
    /**
     * The actual Identity JSON Schema
     */
    schema?: {
        [key: string]: unknown;
    };
};

/**
 * List of Identity JSON Schemas
 */
export type IdentitySchemas = Array<IdentitySchemaContainer>;

/**
 * Traits represent an identity's traits. The identity is able to create, modify, and delete traits
 * in a self-service manner. The input will always be validated against the JSON Schema defined
 * in `schema_url`.
 */
export type IdentityTraits = unknown;

/**
 * VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema
 */
export type IdentityVerifiableAddressStatus = string;

/**
 * Create Identity and Import Credentials
 */
export type IdentityWithCredentials = {
    oidc?: IdentityWithCredentialsOidc;
    password?: IdentityWithCredentialsPassword;
};

/**
 * Create Identity and Import Social Sign In Credentials
 */
export type IdentityWithCredentialsOidc = {
    config?: IdentityWithCredentialsOidcConfig;
};

export type IdentityWithCredentialsOidcConfig = {
    config?: IdentityWithCredentialsPasswordConfig;
    /**
     * A list of OpenID Connect Providers
     */
    providers?: Array<IdentityWithCredentialsOidcConfigProvider>;
};

/**
 * Create Identity and Import Social Sign In Credentials Configuration
 */
export type IdentityWithCredentialsOidcConfigProvider = {
    /**
     * The OpenID Connect provider to link the subject to. Usually something like `google` or `github`.
     */
    provider: string;
    /**
     * The subject (`sub`) of the OpenID Connect connection. Usually the `sub` field of the ID Token.
     */
    subject: string;
    /**
     * If set, this credential allows the user to sign in using the OpenID Connect provider without setting the subject first.
     */
    use_auto_link?: boolean;
};

/**
 * Create Identity and Import Password Credentials
 */
export type IdentityWithCredentialsPassword = {
    config?: IdentityWithCredentialsPasswordConfig;
};

/**
 * Create Identity and Import Password Credentials Configuration
 */
export type IdentityWithCredentialsPasswordConfig = {
    /**
     * The hashed password in [PHC format](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities#hashed-passwords)
     */
    hashed_password?: string;
    /**
     * The password in plain text if no hash is available.
     */
    password?: string;
    /**
     * If set to true, the password will be migrated using the password migration hook.
     */
    use_password_migration_hook?: boolean;
};

/**
 * A JSONPatch document as defined by RFC 6902
 */
export type JsonPatch = {
    /**
     * This field is used together with operation "move" and uses JSON Pointer notation.
     *
     * Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5).
     */
    from?: string;
    /**
     * The operation to be performed. One of "add", "remove", "replace", "move", "copy", or "test".
     */
    op: string;
    /**
     * The path to the target path. Uses JSON pointer notation.
     *
     * Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5).
     */
    path: string;
    /**
     * The value to be used within the operations.
     *
     * Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5).
     */
    value?: unknown;
};

/**
 * A JSONPatchDocument request
 */
export type JsonPatchDocument = Array<JsonPatch>;

/**
 * Login Flow
 * This object represents a login flow. A login flow is initiated at the "Initiate Login API / Browser Flow"
 * endpoint by a client.
 *
 * Once a login flow is completed successfully, a session cookie or session token will be issued.
 */
export type LoginFlow = {
    /**
     * The active login method
     *
     * If set contains the login method used. If the flow is new, it is unset.
     * password CredentialsTypePassword
     * oidc CredentialsTypeOIDC
     * totp CredentialsTypeTOTP
     * lookup_secret CredentialsTypeLookup
     * webauthn CredentialsTypeWebAuthn
     * code CredentialsTypeCodeAuth
     * passkey CredentialsTypePasskey
     * profile CredentialsTypeProfile
     * saml CredentialsTypeSAML
     * link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
     * code_recovery CredentialsTypeRecoveryCode
     */
    active?: 'password' | 'oidc' | 'totp' | 'lookup_secret' | 'webauthn' | 'code' | 'passkey' | 'profile' | 'saml' | 'link_recovery' | 'code_recovery';
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     */
    created_at?: string;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
     * a new flow has to be initiated.
     */
    expires_at: string;
    /**
     * ID represents the flow's unique ID. When performing the login flow, this
     * represents the id in the login UI's query parameter: http://<selfservice.flows.login.ui_url>/?flow=<flow_id>
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the flow started.
     */
    issued_at: string;
    /**
     * Ory OAuth 2.0 Login Challenge.
     *
     * This value is set using the `login_challenge` query parameter of the registration and login endpoints.
     * If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.
     */
    oauth2_login_challenge?: string;
    oauth2_login_request?: OAuth2LoginRequest;
    organization_id?: NullUuid;
    /**
     * Refresh stores whether this login flow should enforce re-authentication.
     */
    refresh?: boolean;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used
     * to forward information contained in the URL's path or query for example.
     */
    request_url: string;
    requested_aal?: AuthenticatorAssuranceLevel;
    /**
     * ReturnTo contains the requested return_to URL.
     */
    return_to?: string;
    /**
     * SessionTokenExchangeCode holds the secret code that the client can use to retrieve a session token after the login flow has been completed.
     * This is only set if the client has requested a session token exchange code, and if the flow is of type "api",
     * and only on creating the login flow.
     */
    session_token_exchange_code?: string;
    /**
     * State represents the state of this request:
     *
     * choose_method: ask the user to choose a method to sign in with
     * sent_email: the email has been sent to the user
     * passed_challenge: the request was successful and the login challenge was passed.
     */
    state: unknown;
    /**
     * TransientPayload is used to pass data from the login to hooks and email templates
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    type: SelfServiceFlowType;
    ui: UiContainer;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     */
    updated_at?: string;
};

/**
 * Login flow state (experimental)
 * The experimental state represents the state of a login flow. This field is EXPERIMENTAL and subject to change!
 */
export type LoginFlowState = 'choose_method' | 'sent_email' | 'passed_challenge';

/**
 * Logout Flow
 */
export type LogoutFlow = {
    /**
     * LogoutToken can be used to perform logout using AJAX.
     */
    logout_token: string;
    /**
     * LogoutURL can be opened in a browser to sign the user out.
     *
     * format: uri
     */
    logout_url: string;
};

export type Message = {
    body: string;
    channel?: string;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     */
    created_at: string;
    /**
     * Dispatches store information about the attempts of delivering a message
     * May contain an error if any happened, or just the `success` state.
     */
    dispatches?: Array<MessageDispatch>;
    id: string;
    recipient: string;
    send_count: number;
    status: CourierMessageStatus;
    subject: string;
    /**
     *
     * recovery_invalid TypeRecoveryInvalid
     * recovery_valid TypeRecoveryValid
     * recovery_code_invalid TypeRecoveryCodeInvalid
     * recovery_code_valid TypeRecoveryCodeValid
     * verification_invalid TypeVerificationInvalid
     * verification_valid TypeVerificationValid
     * verification_code_invalid TypeVerificationCodeInvalid
     * verification_code_valid TypeVerificationCodeValid
     * stub TypeTestStub
     * login_code_valid TypeLoginCodeValid
     * registration_code_valid TypeRegistrationCodeValid
     */
    template_type: 'recovery_invalid' | 'recovery_valid' | 'recovery_code_invalid' | 'recovery_code_valid' | 'verification_invalid' | 'verification_valid' | 'verification_code_invalid' | 'verification_code_valid' | 'stub' | 'login_code_valid' | 'registration_code_valid';
    type: CourierMessageType;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     */
    updated_at: string;
};

/**
 * MessageDispatch represents an attempt of sending a courier message
 * It contains the status of the attempt (failed or successful) and the error if any occured
 */
export type MessageDispatch = {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     */
    created_at: string;
    error?: JsonRawMessage;
    /**
     * The ID of this message dispatch
     */
    id: string;
    /**
     * The ID of the message being dispatched
     */
    message_id: string;
    /**
     * The status of this dispatch
     * Either "failed" or "success"
     * failed CourierMessageDispatchStatusFailed
     * success CourierMessageDispatchStatusSuccess
     */
    status: 'failed' | 'success';
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     */
    updated_at: string;
};

/**
 * Is sent when a privileged session is required to perform the settings update.
 */
export type NeedsPrivilegedSessionError = {
    error?: GenericError;
    /**
     * Points to where to redirect the user to next.
     */
    redirect_browser_to: string;
};

export type NullDuration = string | null;

export type NullInt64 = number | null;

/**
 * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
 */
export type NullJsonRawMessage = unknown;

/**
 * NullTime implements sql.NullTime functionality.
 */
export type NullTime2 = string;

/**
 * Patch Identities Body
 */
export type PatchIdentitiesBody = {
    /**
     * Identities holds the list of patches to apply
     *
     * required
     */
    identities?: Array<IdentityPatch>;
};

/**
 * Perform Native Logout Request Body
 */
export type PerformNativeLogoutBody = {
    /**
     * The Session Token
     *
     * Invalidate this session token.
     */
    session_token: string;
};

/**
 * Recovery Code for Identity
 * Used when an administrator creates a recovery code for an identity.
 */
export type RecoveryCodeForIdentity = {
    /**
     * Expires At is the timestamp of when the recovery flow expires
     *
     * The timestamp when the recovery code expires.
     */
    expires_at?: string;
    /**
     * RecoveryCode is the code that can be used to recover the account
     */
    recovery_code: string;
    /**
     * RecoveryLink with flow
     *
     * This link opens the recovery UI with an empty `code` field.
     */
    recovery_link: string;
};

/**
 * A Recovery Flow
 * This request is used when an identity wants to recover their account.
 *
 * We recommend reading the [Account Recovery Documentation](../self-service/flows/password-reset-account-recovery)
 */
export type RecoveryFlow = {
    /**
     * Active, if set, contains the recovery method that is being used. It is initially
     * not set.
     */
    active?: string;
    /**
     * Contains possible actions that could follow this flow
     */
    continue_with?: Array<ContinueWith>;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the setting,
     * a new request has to be initiated.
     */
    expires_at: string;
    /**
     * ID represents the request's unique ID. When performing the recovery flow, this
     * represents the id in the recovery ui's query parameter: http://<selfservice.flows.recovery.ui_url>?request=<id>
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     */
    issued_at: string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used
     * to forward information contained in the URL's path or query for example.
     */
    request_url: string;
    /**
     * ReturnTo contains the requested return_to URL.
     */
    return_to?: string;
    /**
     * State represents the state of this request:
     *
     * choose_method: ask the user to choose a method (e.g. recover account via email)
     * sent_email: the email has been sent to the user
     * passed_challenge: the request was successful and the recovery challenge was passed.
     */
    state: unknown;
    /**
     * TransientPayload is used to pass data from the recovery flow to hooks and email templates
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    type: SelfServiceFlowType;
    ui: UiContainer;
};

/**
 * Recovery flow state (experimental)
 * The experimental state represents the state of a recovery flow. This field is EXPERIMENTAL and subject to change!
 */
export type RecoveryFlowState = 'choose_method' | 'sent_email' | 'passed_challenge';

export type RecoveryIdentityAddress = {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     */
    created_at?: string;
    id: string;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     */
    updated_at?: string;
    value: string;
    via: RecoveryAddressType;
};

/**
 * Identity Recovery Link
 * Used when an administrator creates a recovery link for an identity.
 */
export type RecoveryLinkForIdentity = {
    /**
     * Recovery Link Expires At
     *
     * The timestamp when the recovery link expires.
     */
    expires_at?: string;
    /**
     * Recovery Link
     *
     * This link can be used to recover the account.
     */
    recovery_link: string;
};

export type RegistrationFlow = {
    /**
     * Active, if set, contains the registration method that is being used. It is initially
     * not set.
     * password CredentialsTypePassword
     * oidc CredentialsTypeOIDC
     * totp CredentialsTypeTOTP
     * lookup_secret CredentialsTypeLookup
     * webauthn CredentialsTypeWebAuthn
     * code CredentialsTypeCodeAuth
     * passkey CredentialsTypePasskey
     * profile CredentialsTypeProfile
     * saml CredentialsTypeSAML
     * link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
     * code_recovery CredentialsTypeRecoveryCode
     */
    active?: 'password' | 'oidc' | 'totp' | 'lookup_secret' | 'webauthn' | 'code' | 'passkey' | 'profile' | 'saml' | 'link_recovery' | 'code_recovery';
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,
     * a new flow has to be initiated.
     */
    expires_at: string;
    /**
     * ID represents the flow's unique ID. When performing the registration flow, this
     * represents the id in the registration ui's query parameter: http://<selfservice.flows.registration.ui_url>/?flow=<id>
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     */
    issued_at: string;
    /**
     * Ory OAuth 2.0 Login Challenge.
     *
     * This value is set using the `login_challenge` query parameter of the registration and login endpoints.
     * If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.
     */
    oauth2_login_challenge?: string;
    oauth2_login_request?: OAuth2LoginRequest;
    organization_id?: NullUuid;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used
     * to forward information contained in the URL's path or query for example.
     */
    request_url: string;
    /**
     * ReturnTo contains the requested return_to URL.
     */
    return_to?: string;
    /**
     * SessionTokenExchangeCode holds the secret code that the client can use to retrieve a session token after the flow has been completed.
     * This is only set if the client has requested a session token exchange code, and if the flow is of type "api",
     * and only on creating the flow.
     */
    session_token_exchange_code?: string;
    /**
     * State represents the state of this request:
     *
     * choose_method: ask the user to choose a method (e.g. registration with email)
     * sent_email: the email has been sent to the user
     * passed_challenge: the request was successful and the registration challenge was passed.
     */
    state: unknown;
    /**
     * TransientPayload is used to pass data from the registration to a webhook
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    type: SelfServiceFlowType;
    ui: UiContainer;
};

/**
 * Registration flow state (experimental)
 * The experimental state represents the state of a registration flow. This field is EXPERIMENTAL and subject to change!
 */
export type RegistrationFlowState = 'choose_method' | 'sent_email' | 'passed_challenge';

/**
 * Is sent when a flow is expired
 */
export type SelfServiceFlowExpiredError = {
    error?: GenericError;
    /**
     * When the flow has expired
     */
    expired_at?: string;
    since?: Duration;
    /**
     * The flow ID that should be used for the new flow as it contains the correct messages.
     */
    use_flow_id?: string;
};

/**
 * Type is the flow type.
 * The flow type can either be `api` or `browser`.
 */
export type SelfServiceFlowType = string;

/**
 * A Session
 */
export type Session = {
    /**
     * Active state. If false the session is no longer active.
     */
    active?: boolean;
    /**
     * The Session Authentication Timestamp
     *
     * When this session was authenticated at. If multi-factor authentication was used this
     * is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
     */
    authenticated_at?: string;
    authentication_methods?: SessionAuthenticationMethods;
    authenticator_assurance_level?: AuthenticatorAssuranceLevel;
    /**
     * Devices has history of all endpoints where the session was used
     */
    devices?: Array<SessionDevice>;
    /**
     * The Session Expiry
     *
     * When this session expires at.
     */
    expires_at?: string;
    /**
     * Session ID
     */
    id: string;
    identity?: Identity;
    /**
     * The Session Issuance Timestamp
     *
     * When this session was issued at. Usually equal or close to `authenticated_at`.
     */
    issued_at?: string;
    /**
     * Tokenized is the tokenized (e.g. JWT) version of the session.
     *
     * It is only set when the `tokenize` query parameter was set to a valid tokenize template during calls to `/session/whoami`.
     */
    tokenized?: string;
};

/**
 * AuthenticationMethod identifies an authentication method
 * A singular authenticator used during authentication / login.
 */
export type SessionAuthenticationMethod = {
    aal?: AuthenticatorAssuranceLevel;
    /**
     * When the authentication challenge was completed.
     */
    completed_at?: string;
    /**
     * The method used
     */
    method?: 'link_recovery' | 'code_recovery' | 'password' | 'code' | 'totp' | 'oidc' | 'webauthn' | 'lookup_secret' | 'v0.6_legacy_session';
    /**
     * The Organization id used for authentication
     */
    organization?: string;
    /**
     * OIDC or SAML provider id used for authentication
     */
    provider?: string;
};

/**
 * List of (Used) AuthenticationMethods
 * A list of authenticators which were used to authenticate the session.
 */
export type SessionAuthenticationMethods = Array<SessionAuthenticationMethod>;

/**
 * Device corresponding to a Session
 */
export type SessionDevice = {
    /**
     * Device record ID
     */
    id: string;
    /**
     * IPAddress of the client
     */
    ip_address?: string;
    /**
     * Geo Location corresponding to the IP Address
     */
    location?: string;
    /**
     * UserAgent of the client
     */
    user_agent?: string;
};

/**
 * Flow represents a Settings Flow
 * This flow is used when an identity wants to update settings
 * (e.g. profile data, passwords, ...) in a selfservice manner.
 *
 * We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)
 */
export type SettingsFlow = {
    /**
     * Active, if set, contains the registration method that is being used. It is initially
     * not set.
     */
    active?: string;
    /**
     * Contains a list of actions, that could follow this flow
     *
     * It can, for example, contain a reference to the verification flow, created as part of the user's
     * registration.
     */
    continue_with?: Array<ContinueWith>;
    /**
     * ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting,
     * a new flow has to be initiated.
     */
    expires_at: string;
    /**
     * ID represents the flow's unique ID. When performing the settings flow, this
     * represents the id in the settings ui's query parameter: http://<selfservice.flows.settings.ui_url>?flow=<id>
     */
    id: string;
    identity: Identity;
    /**
     * IssuedAt is the time (UTC) when the flow occurred.
     */
    issued_at: string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used
     * to forward information contained in the URL's path or query for example.
     */
    request_url: string;
    /**
     * ReturnTo contains the requested return_to URL.
     */
    return_to?: string;
    /**
     * State represents the state of this flow. It knows two states:
     *
     * show_form: No user data has been collected, or it is invalid, and thus the form should be shown.
     * success: Indicates that the settings flow has been updated successfully with the provided data.
     * Done will stay true when repeatedly checking. If set to true, done will revert back to false only
     * when a flow with invalid (e.g. "please use a valid phone number") data was sent.
     */
    state: unknown;
    /**
     * TransientPayload is used to pass data from the settings flow to hooks and email templates
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    type: SelfServiceFlowType;
    ui: UiContainer;
};

/**
 * Settings flow state (experimental)
 * The experimental state represents the state of a settings flow. This field is EXPERIMENTAL and subject to change!
 */
export type SettingsFlowState = 'show_form' | 'success';

/**
 * The Response for Registration Flows via API
 */
export type SuccessfulCodeExchangeResponse = {
    session: Session;
    /**
     * The Session Token
     *
     * A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
     * Header:
     *
     * Authorization: bearer ${session-token}
     *
     * The session token is only issued for API flows, not for Browser flows!
     */
    session_token?: string;
};

/**
 * The Response for Login Flows via API
 */
export type SuccessfulNativeLogin = {
    /**
     * Contains a list of actions, that could follow this flow
     *
     * It can, for example, this will contain a reference to the verification flow, created as part of the user's
     * registration or the token of the session.
     */
    continue_with?: Array<ContinueWith>;
    session: Session;
    /**
     * The Session Token
     *
     * A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
     * Header:
     *
     * Authorization: bearer ${session-token}
     *
     * The session token is only issued for API flows, not for Browser flows!
     */
    session_token?: string;
};

/**
 * The Response for Registration Flows via API
 */
export type SuccessfulNativeRegistration = {
    /**
     * Contains a list of actions, that could follow this flow
     *
     * It can, for example, this will contain a reference to the verification flow, created as part of the user's
     * registration or the token of the session.
     */
    continue_with?: Array<ContinueWith>;
    identity: Identity;
    session?: Session;
    /**
     * The Session Token
     *
     * This field is only set when the session hook is configured as a post-registration hook.
     *
     * A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization
     * Header:
     *
     * Authorization: bearer ${session-token}
     *
     * The session token is only issued for API flows, not for Browser flows!
     */
    session_token?: string;
};

export type TokenPagination = {
    /**
     * Items per page
     *
     * This is the number of items per page to return.
     * For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     */
    page_size?: number;
    /**
     * Next Page Token
     *
     * The next page token.
     * For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     */
    page_token?: string;
};

export type TokenPaginationHeaders = {
    /**
     * The link header contains pagination links.
     *
     * For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
     *
     * in: header
     */
    link?: string;
    /**
     * The total number of clients.
     *
     * in: header
     */
    'x-total-count'?: string;
};

/**
 * Container represents a HTML Form. The container can work with both HTTP Form and JSON requests
 */
export type UiContainer = {
    /**
     * Action should be used as the form action URL `<form action="{{ .Action }}" method="post">`.
     */
    action: string;
    messages?: UiTexts;
    /**
     * Method is the form method (e.g. POST)
     */
    method: string;
    nodes: UiNodes;
};

/**
 * Node represents a flow's nodes
 * Nodes are represented as HTML elements or their native UI equivalents. For example,
 * a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
 */
export type UiNode = {
    attributes: UiNodeAttributes;
    /**
     * Group specifies which group (e.g. password authenticator) this node belongs to.
     * default DefaultGroup
     * password PasswordGroup
     * oidc OpenIDConnectGroup
     * profile ProfileGroup
     * link LinkGroup
     * code CodeGroup
     * totp TOTPGroup
     * lookup_secret LookupGroup
     * webauthn WebAuthnGroup
     * passkey PasskeyGroup
     * identifier_first IdentifierFirstGroup
     * captcha CaptchaGroup
     * saml SAMLGroup
     */
    group: 'default' | 'password' | 'oidc' | 'profile' | 'link' | 'code' | 'totp' | 'lookup_secret' | 'webauthn' | 'passkey' | 'identifier_first' | 'captcha' | 'saml';
    messages: UiTexts;
    meta: UiNodeMeta;
    /**
     * The node's type
     * text Text
     * input Input
     * img Image
     * a Anchor
     * script Script
     */
    type: 'text' | 'input' | 'img' | 'a' | 'script';
};

/**
 * AnchorAttributes represents the attributes of an anchor node.
 */
export type UiNodeAnchorAttributes = {
    /**
     * The link's href (destination) URL.
     *
     * format: uri
     */
    href: string;
    /**
     * A unique identifier
     */
    id: string;
    /**
     * NodeType represents this node's types. It is a mirror of `node.type` and
     * is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
     * text Text
     * input Input
     * img Image
     * a Anchor
     * script Script
     */
    node_type: 'text' | 'input' | 'img' | 'a' | 'script';
    title: UiText;
};

/**
 * Attributes represents a list of attributes (e.g. `href="foo"` for links).
 */
export type UiNodeAttributes = ({
    node_type: 'input';
} & UiNodeInputAttributes) | ({
    node_type: 'text';
} & UiNodeTextAttributes) | ({
    node_type: 'img';
} & UiNodeImageAttributes) | ({
    node_type: 'a';
} & UiNodeAnchorAttributes) | ({
    node_type: 'script';
} & UiNodeScriptAttributes);

/**
 * ImageAttributes represents the attributes of an image node.
 */
export type UiNodeImageAttributes = {
    /**
     * Height of the image
     */
    height: number;
    /**
     * A unique identifier
     */
    id: string;
    /**
     * NodeType represents this node's types. It is a mirror of `node.type` and
     * is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "img".
     * text Text
     * input Input
     * img Image
     * a Anchor
     * script Script
     */
    node_type: 'text' | 'input' | 'img' | 'a' | 'script';
    /**
     * The image's source URL.
     *
     * format: uri
     */
    src: string;
    /**
     * Width of the image
     */
    width: number;
};

/**
 * InputAttributes represents the attributes of an input node
 */
export type UiNodeInputAttributes = {
    /**
     * The autocomplete attribute for the input.
     * email InputAttributeAutocompleteEmail
     * tel InputAttributeAutocompleteTel
     * url InputAttributeAutocompleteUrl
     * current-password InputAttributeAutocompleteCurrentPassword
     * new-password InputAttributeAutocompleteNewPassword
     * one-time-code InputAttributeAutocompleteOneTimeCode
     */
    autocomplete?: 'email' | 'tel' | 'url' | 'current-password' | 'new-password' | 'one-time-code';
    /**
     * Sets the input's disabled field to true or false.
     */
    disabled: boolean;
    label?: UiText;
    /**
     * MaxLength may contain the input's maximum length.
     */
    maxlength?: number;
    /**
     * The input's element name.
     */
    name: string;
    /**
     * NodeType represents this node's types. It is a mirror of `node.type` and
     * is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
     * text Text
     * input Input
     * img Image
     * a Anchor
     * script Script
     */
    node_type: 'text' | 'input' | 'img' | 'a' | 'script';
    /**
     * OnClick may contain javascript which should be executed on click. This is primarily
     * used for WebAuthn.
     *
     * Deprecated: Using OnClick requires the use of eval() which is a security risk. Use OnClickTrigger instead.
     */
    onclick?: string;
    /**
     * OnClickTrigger may contain a WebAuthn trigger which should be executed on click.
     *
     * The trigger maps to a JavaScript function provided by Ory, which triggers actions such as PassKey registration or login.
     * oryWebAuthnRegistration WebAuthnTriggersWebAuthnRegistration
     * oryWebAuthnLogin WebAuthnTriggersWebAuthnLogin
     * oryPasskeyLogin WebAuthnTriggersPasskeyLogin
     * oryPasskeyLoginAutocompleteInit WebAuthnTriggersPasskeyLoginAutocompleteInit
     * oryPasskeyRegistration WebAuthnTriggersPasskeyRegistration
     * oryPasskeySettingsRegistration WebAuthnTriggersPasskeySettingsRegistration
     */
    onclickTrigger?: 'oryWebAuthnRegistration' | 'oryWebAuthnLogin' | 'oryPasskeyLogin' | 'oryPasskeyLoginAutocompleteInit' | 'oryPasskeyRegistration' | 'oryPasskeySettingsRegistration';
    /**
     * OnLoad may contain javascript which should be executed on load. This is primarily
     * used for WebAuthn.
     *
     * Deprecated: Using OnLoad requires the use of eval() which is a security risk. Use OnLoadTrigger instead.
     */
    onload?: string;
    /**
     * OnLoadTrigger may contain a WebAuthn trigger which should be executed on load.
     *
     * The trigger maps to a JavaScript function provided by Ory, which triggers actions such as PassKey registration or login.
     * oryWebAuthnRegistration WebAuthnTriggersWebAuthnRegistration
     * oryWebAuthnLogin WebAuthnTriggersWebAuthnLogin
     * oryPasskeyLogin WebAuthnTriggersPasskeyLogin
     * oryPasskeyLoginAutocompleteInit WebAuthnTriggersPasskeyLoginAutocompleteInit
     * oryPasskeyRegistration WebAuthnTriggersPasskeyRegistration
     * oryPasskeySettingsRegistration WebAuthnTriggersPasskeySettingsRegistration
     */
    onloadTrigger?: 'oryWebAuthnRegistration' | 'oryWebAuthnLogin' | 'oryPasskeyLogin' | 'oryPasskeyLoginAutocompleteInit' | 'oryPasskeyRegistration' | 'oryPasskeySettingsRegistration';
    /**
     * The input's pattern.
     */
    pattern?: string;
    /**
     * Mark this input field as required.
     */
    required?: boolean;
    /**
     * The input's element type.
     * text InputAttributeTypeText
     * password InputAttributeTypePassword
     * number InputAttributeTypeNumber
     * checkbox InputAttributeTypeCheckbox
     * hidden InputAttributeTypeHidden
     * email InputAttributeTypeEmail
     * tel InputAttributeTypeTel
     * submit InputAttributeTypeSubmit
     * button InputAttributeTypeButton
     * datetime-local InputAttributeTypeDateTimeLocal
     * date InputAttributeTypeDate
     * url InputAttributeTypeURI
     */
    type: 'text' | 'password' | 'number' | 'checkbox' | 'hidden' | 'email' | 'tel' | 'submit' | 'button' | 'datetime-local' | 'date' | 'url';
    /**
     * The input's value.
     */
    value?: unknown;
};

/**
 * A Node's Meta Information
 * This might include a label and other information that can optionally
 * be used to render UIs.
 */
export type UiNodeMeta = {
    label?: UiText;
};

/**
 * ScriptAttributes represent script nodes which load javascript.
 */
export type UiNodeScriptAttributes = {
    /**
     * The script async type
     */
    async: boolean;
    /**
     * The script cross origin policy
     */
    crossorigin: string;
    /**
     * A unique identifier
     */
    id: string;
    /**
     * The script's integrity hash
     */
    integrity: string;
    /**
     * NodeType represents this node's types. It is a mirror of `node.type` and
     * is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
     * text Text
     * input Input
     * img Image
     * a Anchor
     * script Script
     */
    node_type: 'text' | 'input' | 'img' | 'a' | 'script';
    /**
     * Nonce for CSP
     *
     * A nonce you may want to use to improve your Content Security Policy.
     * You do not have to use this value but if you want to improve your CSP
     * policies you may use it. You can also choose to use your own nonce value!
     */
    nonce: string;
    /**
     * The script referrer policy
     */
    referrerpolicy: string;
    /**
     * The script source
     */
    src: string;
    /**
     * The script MIME type
     */
    type: string;
};

/**
 * TextAttributes represents the attributes of a text node.
 */
export type UiNodeTextAttributes = {
    /**
     * A unique identifier
     */
    id: string;
    /**
     * NodeType represents this node's types. It is a mirror of `node.type` and
     * is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
     * text Text
     * input Input
     * img Image
     * a Anchor
     * script Script
     */
    node_type: 'text' | 'input' | 'img' | 'a' | 'script';
    text: UiText;
};

export type UiNodes = Array<UiNode>;

export type UiText = {
    /**
     * The message's context. Useful when customizing messages.
     */
    context?: {
        [key: string]: unknown;
    };
    id: Id;
    /**
     * The message text. Written in american english.
     */
    text: string;
    /**
     * The message type.
     * info Info
     * error Error
     * success Success
     */
    type: 'info' | 'error' | 'success';
};

export type UiTexts = Array<UiText>;

export type UnexpectedError = string;

/**
 * Update Identity Body
 */
export type UpdateIdentityBody = {
    credentials?: IdentityWithCredentials;
    /**
     * Store metadata about the user which is only accessible through admin APIs such as `GET /admin/identities/<id>`.
     */
    metadata_admin?: unknown;
    /**
     * Store metadata about the identity which the identity itself can see when calling for example the
     * session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
     */
    metadata_public?: unknown;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity's traits. If set
     * will update the Identity's SchemaID.
     */
    schema_id: string;
    /**
     * State is the identity's state.
     * active StateActive
     * inactive StateInactive
     */
    state: 'active' | 'inactive';
    /**
     * Traits represent an identity's traits. The identity is able to create, modify, and delete traits
     * in a self-service manner. The input will always be validated against the JSON Schema defined
     * in `schema_id`.
     */
    traits: {
        [key: string]: unknown;
    };
};

export type UpdateLoginFlowBody = ({
    method: 'password';
} & UpdateLoginFlowWithPasswordMethod) | ({
    method: 'oidc';
} & UpdateLoginFlowWithOidcMethod) | ({
    method: 'totp';
} & UpdateLoginFlowWithTotpMethod) | ({
    method: 'webauthn';
} & UpdateLoginFlowWithWebAuthnMethod) | ({
    method: 'lookup_secret';
} & UpdateLoginFlowWithLookupSecretMethod) | ({
    method: 'code';
} & UpdateLoginFlowWithCodeMethod) | ({
    method: 'passkey';
} & UpdateLoginFlowWithPasskeyMethod) | ({
    method: 'identifier_first';
} & UpdateLoginFlowWithIdentifierFirstMethod);

/**
 * Update Login flow using the code method
 */
export type UpdateLoginFlowWithCodeMethod = {
    /**
     * Address is the address to send the code to, in case that there are multiple addresses. This field
     * is only used in two-factor flows and is ineffective for passwordless flows.
     */
    address?: string;
    /**
     * Code is the 6 digits code sent to the user
     */
    code?: string;
    /**
     * CSRFToken is the anti-CSRF token
     */
    csrf_token: string;
    /**
     * Identifier is the code identifier
     * The identifier requires that the user has already completed the registration or settings with code flow.
     */
    identifier?: string;
    /**
     * Method should be set to "code" when logging in using the code strategy.
     */
    method: string;
    /**
     * Resend is set when the user wants to resend the code
     */
    resend?: string;
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Login Flow with Multi-Step Method
 */
export type UpdateLoginFlowWithIdentifierFirstMethod = {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     */
    csrf_token?: string;
    /**
     * Identifier is the email or username of the user trying to log in.
     */
    identifier: string;
    /**
     * Method should be set to "password" when logging in using the identifier and password strategy.
     */
    method: string;
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Login Flow with Lookup Secret Method
 */
export type UpdateLoginFlowWithLookupSecretMethod = {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     */
    csrf_token?: string;
    /**
     * The lookup secret.
     */
    lookup_secret: string;
    /**
     * Method should be set to "lookup_secret" when logging in using the lookup_secret strategy.
     */
    method: string;
};

/**
 * Update Login Flow with OpenID Connect Method
 */
export type UpdateLoginFlowWithOidcMethod = {
    /**
     * The CSRF Token
     */
    csrf_token?: string;
    /**
     * IDToken is an optional id token provided by an OIDC provider
     *
     * If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate
     * the OIDC credentials of the identity.
     * If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use
     * the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.
     *
     * Supported providers are
     * Apple
     * Google
     */
    id_token?: string;
    /**
     * IDTokenNonce is the nonce, used when generating the IDToken.
     * If the provider supports nonce validation, the nonce will be validated against this value and required.
     */
    id_token_nonce?: string;
    /**
     * Method to use
     *
     * This field must be set to `oidc` when using the oidc method.
     */
    method: string;
    /**
     * The provider to register with
     */
    provider: string;
    /**
     * The identity traits. This is a placeholder for the registration flow.
     */
    traits?: {
        [key: string]: unknown;
    };
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    /**
     * UpstreamParameters are the parameters that are passed to the upstream identity provider.
     *
     * These parameters are optional and depend on what the upstream identity provider supports.
     * Supported parameters are:
     * `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session.
     * `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
     * `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
     */
    upstream_parameters?: {
        [key: string]: unknown;
    };
};

/**
 * Update Login Flow with Passkey Method
 */
export type UpdateLoginFlowWithPasskeyMethod = {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     */
    csrf_token?: string;
    /**
     * Method should be set to "passkey" when logging in using the Passkey strategy.
     */
    method: string;
    /**
     * Login a WebAuthn Security Key
     *
     * This must contain the ID of the WebAuthN connection.
     */
    passkey_login?: string;
};

/**
 * Update Login Flow with Password Method
 */
export type UpdateLoginFlowWithPasswordMethod = {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     */
    csrf_token?: string;
    /**
     * Identifier is the email or username of the user trying to log in.
     */
    identifier: string;
    /**
     * Method should be set to "password" when logging in using the identifier and password strategy.
     */
    method: string;
    /**
     * The user's password.
     */
    password: string;
    /**
     * Identifier is the email or username of the user trying to log in.
     * This field is deprecated!
     */
    password_identifier?: string;
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Login Flow with TOTP Method
 */
export type UpdateLoginFlowWithTotpMethod = {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     */
    csrf_token?: string;
    /**
     * Method should be set to "totp" when logging in using the TOTP strategy.
     */
    method: string;
    /**
     * The TOTP code.
     */
    totp_code: string;
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Login Flow with WebAuthn Method
 */
export type UpdateLoginFlowWithWebAuthnMethod = {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     */
    csrf_token?: string;
    /**
     * Identifier is the email or username of the user trying to log in.
     */
    identifier: string;
    /**
     * Method should be set to "webAuthn" when logging in using the WebAuthn strategy.
     */
    method: string;
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    /**
     * Login a WebAuthn Security Key
     *
     * This must contain the ID of the WebAuthN connection.
     */
    webauthn_login?: string;
};

/**
 * Update Recovery Flow Request Body
 */
export type UpdateRecoveryFlowBody = ({
    method: 'link';
} & UpdateRecoveryFlowWithLinkMethod) | ({
    method: 'code';
} & UpdateRecoveryFlowWithCodeMethod);

/**
 * Update Recovery Flow with Code Method
 */
export type UpdateRecoveryFlowWithCodeMethod = {
    /**
     * Code from the recovery email
     *
     * If you want to submit a code, use this field, but make sure to _not_ include the email field, as well.
     */
    code?: string;
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     */
    csrf_token?: string;
    /**
     * The email address of the account to recover
     *
     * If the email belongs to a valid account, a recovery email will be sent.
     *
     * If you want to notify the email address if the account does not exist, see
     * the [notify_unknown_recipients flag](https://www.ory.sh/docs/kratos/self-service/flows/account-recovery-password-reset#attempted-recovery-notifications)
     *
     * If a code was already sent, including this field in the payload will invalidate the sent code and re-send a new code.
     *
     * format: email
     */
    email?: string;
    /**
     * Method is the method that should be used for this recovery flow
     *
     * Allowed values are `link` and `code`.
     * link RecoveryStrategyLink
     * code RecoveryStrategyCode
     */
    method: 'link' | 'code';
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Recovery Flow with Link Method
 */
export type UpdateRecoveryFlowWithLinkMethod = {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     */
    csrf_token?: string;
    /**
     * Email to Recover
     *
     * Needs to be set when initiating the flow. If the email is a registered
     * recovery email, a recovery link will be sent. If the email is not known,
     * a email with details on what happened will be sent instead.
     *
     * format: email
     */
    email: string;
    /**
     * Method is the method that should be used for this recovery flow
     *
     * Allowed values are `link` and `code`
     * link RecoveryStrategyLink
     * code RecoveryStrategyCode
     */
    method: 'link' | 'code';
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Registration Request Body
 */
export type UpdateRegistrationFlowBody = ({
    method: 'password';
} & UpdateRegistrationFlowWithPasswordMethod) | ({
    method: 'oidc';
} & UpdateRegistrationFlowWithOidcMethod) | ({
    method: 'webauthn';
} & UpdateRegistrationFlowWithWebAuthnMethod) | ({
    method: 'code';
} & UpdateRegistrationFlowWithCodeMethod) | ({
    method: 'passkey';
} & UpdateRegistrationFlowWithPasskeyMethod) | ({
    method: 'profile';
} & UpdateRegistrationFlowWithProfileMethod);

/**
 * Update Registration Flow with Code Method
 */
export type UpdateRegistrationFlowWithCodeMethod = {
    /**
     * The OTP Code sent to the user
     */
    code?: string;
    /**
     * The CSRF Token
     */
    csrf_token?: string;
    /**
     * Method to use
     *
     * This field must be set to `code` when using the code method.
     */
    method: string;
    /**
     * Resend restarts the flow with a new code
     */
    resend?: string;
    /**
     * The identity's traits
     */
    traits: {
        [key: string]: unknown;
    };
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Registration Flow with OpenID Connect Method
 */
export type UpdateRegistrationFlowWithOidcMethod = {
    /**
     * The CSRF Token
     */
    csrf_token?: string;
    /**
     * IDToken is an optional id token provided by an OIDC provider
     *
     * If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate
     * the OIDC credentials of the identity.
     * If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use
     * the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.
     *
     * Supported providers are
     * Apple
     * Google
     */
    id_token?: string;
    /**
     * IDTokenNonce is the nonce, used when generating the IDToken.
     * If the provider supports nonce validation, the nonce will be validated against this value and is required.
     */
    id_token_nonce?: string;
    /**
     * Method to use
     *
     * This field must be set to `oidc` when using the oidc method.
     */
    method: string;
    /**
     * The provider to register with
     */
    provider: string;
    /**
     * The identity traits
     */
    traits?: {
        [key: string]: unknown;
    };
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    /**
     * UpstreamParameters are the parameters that are passed to the upstream identity provider.
     *
     * These parameters are optional and depend on what the upstream identity provider supports.
     * Supported parameters are:
     * `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session.
     * `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
     * `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
     */
    upstream_parameters?: {
        [key: string]: unknown;
    };
};

/**
 * Update Registration Flow with Passkey Method
 */
export type UpdateRegistrationFlowWithPasskeyMethod = {
    /**
     * CSRFToken is the anti-CSRF token
     */
    csrf_token?: string;
    /**
     * Method
     *
     * Should be set to "passkey" when trying to add, update, or remove a Passkey.
     */
    method: string;
    /**
     * Register a WebAuthn Security Key
     *
     * It is expected that the JSON returned by the WebAuthn registration process
     * is included here.
     */
    passkey_register?: string;
    /**
     * The identity's traits
     */
    traits: {
        [key: string]: unknown;
    };
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Registration Flow with Password Method
 */
export type UpdateRegistrationFlowWithPasswordMethod = {
    /**
     * The CSRF Token
     */
    csrf_token?: string;
    /**
     * Method to use
     *
     * This field must be set to `password` when using the password method.
     */
    method: string;
    /**
     * Password to sign the user up with
     */
    password: string;
    /**
     * The identity's traits
     */
    traits: {
        [key: string]: unknown;
    };
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Registration Flow with Profile Method
 */
export type UpdateRegistrationFlowWithProfileMethod = {
    /**
     * The Anti-CSRF Token
     *
     * This token is only required when performing browser flows.
     */
    csrf_token?: string;
    /**
     * Method
     *
     * Should be set to profile when trying to update a profile.
     */
    method: string;
    /**
     * Screen requests navigation to a previous screen.
     *
     * This must be set to credential-selection to go back to the credential
     * selection screen.
     * credential-selection RegistrationScreenCredentialSelection nolint:gosec // not a credential
     * previous RegistrationScreenPrevious
     */
    screen?: 'credential-selection' | 'previous';
    /**
     * Traits
     *
     * The identity's traits.
     */
    traits: {
        [key: string]: unknown;
    };
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Registration Flow with WebAuthn Method
 */
export type UpdateRegistrationFlowWithWebAuthnMethod = {
    /**
     * CSRFToken is the anti-CSRF token
     */
    csrf_token?: string;
    /**
     * Method
     *
     * Should be set to "webauthn" when trying to add, update, or remove a webAuthn pairing.
     */
    method: string;
    /**
     * The identity's traits
     */
    traits: {
        [key: string]: unknown;
    };
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    /**
     * Register a WebAuthn Security Key
     *
     * It is expected that the JSON returned by the WebAuthn registration process
     * is included here.
     */
    webauthn_register?: string;
    /**
     * Name of the WebAuthn Security Key to be Added
     *
     * A human-readable name for the security key which will be added.
     */
    webauthn_register_displayname?: string;
};

/**
 * Update Settings Flow Request Body
 */
export type UpdateSettingsFlowBody = ({
    method: 'password';
} & UpdateSettingsFlowWithPasswordMethod) | ({
    method: 'profile';
} & UpdateSettingsFlowWithProfileMethod) | ({
    method: 'oidc';
} & UpdateSettingsFlowWithOidcMethod) | ({
    method: 'totp';
} & UpdateSettingsFlowWithTotpMethod) | ({
    method: 'webauthn';
} & UpdateSettingsFlowWithWebAuthnMethod) | ({
    method: 'lookup_secret';
} & UpdateSettingsFlowWithLookupMethod) | ({
    method: 'passkey';
} & UpdateSettingsFlowWithPasskeyMethod);

/**
 * Update Settings Flow with Lookup Method
 */
export type UpdateSettingsFlowWithLookupMethod = {
    /**
     * CSRFToken is the anti-CSRF token
     */
    csrf_token?: string;
    /**
     * If set to true will save the regenerated lookup secrets
     */
    lookup_secret_confirm?: boolean;
    /**
     * Disables this method if true.
     */
    lookup_secret_disable?: boolean;
    /**
     * If set to true will regenerate the lookup secrets
     */
    lookup_secret_regenerate?: boolean;
    /**
     * If set to true will reveal the lookup secrets
     */
    lookup_secret_reveal?: boolean;
    /**
     * Method
     *
     * Should be set to "lookup" when trying to add, update, or remove a lookup pairing.
     */
    method: string;
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Settings Flow with OpenID Connect Method
 */
export type UpdateSettingsFlowWithOidcMethod = {
    /**
     * Flow ID is the flow's ID.
     *
     * in: query
     */
    flow?: string;
    /**
     * Link this provider
     *
     * Either this or `unlink` must be set.
     *
     * type: string
     * in: body
     */
    link?: string;
    /**
     * Method
     *
     * Should be set to profile when trying to update a profile.
     */
    method: string;
    /**
     * The identity's traits
     *
     * in: body
     */
    traits?: {
        [key: string]: unknown;
    };
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    /**
     * Unlink this provider
     *
     * Either this or `link` must be set.
     *
     * type: string
     * in: body
     */
    unlink?: string;
    /**
     * UpstreamParameters are the parameters that are passed to the upstream identity provider.
     *
     * These parameters are optional and depend on what the upstream identity provider supports.
     * Supported parameters are:
     * `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session.
     * `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
     * `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
     */
    upstream_parameters?: {
        [key: string]: unknown;
    };
};

/**
 * Update Settings Flow with Passkey Method
 */
export type UpdateSettingsFlowWithPasskeyMethod = {
    /**
     * CSRFToken is the anti-CSRF token
     */
    csrf_token?: string;
    /**
     * Method
     *
     * Should be set to "passkey" when trying to add, update, or remove a webAuthn pairing.
     */
    method: string;
    /**
     * Remove a WebAuthn Security Key
     *
     * This must contain the ID of the WebAuthN connection.
     */
    passkey_remove?: string;
    /**
     * Register a WebAuthn Security Key
     *
     * It is expected that the JSON returned by the WebAuthn registration process
     * is included here.
     */
    passkey_settings_register?: string;
};

/**
 * Update Settings Flow with Password Method
 */
export type UpdateSettingsFlowWithPasswordMethod = {
    /**
     * CSRFToken is the anti-CSRF token
     */
    csrf_token?: string;
    /**
     * Method
     *
     * Should be set to password when trying to update a password.
     */
    method: string;
    /**
     * Password is the updated password
     */
    password: string;
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Settings Flow with Profile Method
 */
export type UpdateSettingsFlowWithProfileMethod = {
    /**
     * The Anti-CSRF Token
     *
     * This token is only required when performing browser flows.
     */
    csrf_token?: string;
    /**
     * Method
     *
     * Should be set to profile when trying to update a profile.
     */
    method: string;
    /**
     * Traits
     *
     * The identity's traits.
     */
    traits: {
        [key: string]: unknown;
    };
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Settings Flow with TOTP Method
 */
export type UpdateSettingsFlowWithTotpMethod = {
    /**
     * CSRFToken is the anti-CSRF token
     */
    csrf_token?: string;
    /**
     * Method
     *
     * Should be set to "totp" when trying to add, update, or remove a totp pairing.
     */
    method: string;
    /**
     * ValidationTOTP must contain a valid TOTP based on the
     */
    totp_code?: string;
    /**
     * UnlinkTOTP if true will remove the TOTP pairing,
     * effectively removing the credential. This can be used
     * to set up a new TOTP device.
     */
    totp_unlink?: boolean;
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Settings Flow with WebAuthn Method
 */
export type UpdateSettingsFlowWithWebAuthnMethod = {
    /**
     * CSRFToken is the anti-CSRF token
     */
    csrf_token?: string;
    /**
     * Method
     *
     * Should be set to "webauthn" when trying to add, update, or remove a webAuthn pairing.
     */
    method: string;
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    /**
     * Register a WebAuthn Security Key
     *
     * It is expected that the JSON returned by the WebAuthn registration process
     * is included here.
     */
    webauthn_register?: string;
    /**
     * Name of the WebAuthn Security Key to be Added
     *
     * A human-readable name for the security key which will be added.
     */
    webauthn_register_displayname?: string;
    /**
     * Remove a WebAuthn Security Key
     *
     * This must contain the ID of the WebAuthN connection.
     */
    webauthn_remove?: string;
};

/**
 * Update Verification Flow Request Body
 */
export type UpdateVerificationFlowBody = ({
    method: 'link';
} & UpdateVerificationFlowWithLinkMethod) | ({
    method: 'code';
} & UpdateVerificationFlowWithCodeMethod);

export type UpdateVerificationFlowWithCodeMethod = {
    /**
     * Code from the recovery email
     *
     * If you want to submit a code, use this field, but make sure to _not_ include the email field, as well.
     */
    code?: string;
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     */
    csrf_token?: string;
    /**
     * The email address to verify
     *
     * If the email belongs to a valid account, a verifiation email will be sent.
     *
     * If you want to notify the email address if the account does not exist, see
     * the [notify_unknown_recipients flag](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation#attempted-verification-notifications)
     *
     * If a code was already sent, including this field in the payload will invalidate the sent code and re-send a new code.
     *
     * format: email
     */
    email?: string;
    /**
     * Method is the method that should be used for this verification flow
     *
     * Allowed values are `link` and `code`.
     * link VerificationStrategyLink
     * code VerificationStrategyCode
     */
    method: 'link' | 'code';
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * Update Verification Flow with Link Method
 */
export type UpdateVerificationFlowWithLinkMethod = {
    /**
     * Sending the anti-csrf token is only required for browser login flows.
     */
    csrf_token?: string;
    /**
     * Email to Verify
     *
     * Needs to be set when initiating the flow. If the email is a registered
     * verification email, a verification link will be sent. If the email is not known,
     * a email with details on what happened will be sent instead.
     *
     * format: email
     */
    email: string;
    /**
     * Method is the method that should be used for this verification flow
     *
     * Allowed values are `link` and `code`
     * link VerificationStrategyLink
     * code VerificationStrategyCode
     */
    method: 'link' | 'code';
    /**
     * Transient data to pass along to any webhooks
     */
    transient_payload?: {
        [key: string]: unknown;
    };
};

/**
 * VerifiableAddress is an identity's verifiable address
 */
export type VerifiableIdentityAddress = {
    /**
     * When this entry was created
     */
    created_at?: string;
    /**
     * The ID
     */
    id?: string;
    status: IdentityVerifiableAddressStatus;
    /**
     * When this entry was last updated
     */
    updated_at?: string;
    /**
     * The address value
     *
     * example foo@user.com
     */
    value: string;
    /**
     * Indicates if the address has already been verified
     */
    verified: boolean;
    verified_at?: NullTime2;
    /**
     * The delivery method
     */
    via: 'email' | 'sms';
};

/**
 * A Verification Flow
 * Used to verify an out-of-band communication
 * channel such as an email address or a phone number.
 *
 * For more information head over to: https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation
 */
export type VerificationFlow = {
    /**
     * Active, if set, contains the registration method that is being used. It is initially
     * not set.
     */
    active?: string;
    /**
     * ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address,
     * a new request has to be initiated.
     */
    expires_at?: string;
    /**
     * ID represents the request's unique ID. When performing the verification flow, this
     * represents the id in the verify ui's query parameter: http://<selfservice.flows.verification.ui_url>?request=<id>
     *
     * type: string
     * format: uuid
     */
    id: string;
    /**
     * IssuedAt is the time (UTC) when the request occurred.
     */
    issued_at?: string;
    /**
     * RequestURL is the initial URL that was requested from Ory Kratos. It can be used
     * to forward information contained in the URL's path or query for example.
     */
    request_url?: string;
    /**
     * ReturnTo contains the requested return_to URL.
     */
    return_to?: string;
    /**
     * State represents the state of this request:
     *
     * choose_method: ask the user to choose a method (e.g. verify your email)
     * sent_email: the email has been sent to the user
     * passed_challenge: the request was successful and the verification challenge was passed.
     */
    state: unknown;
    /**
     * TransientPayload is used to pass data from the verification flow to hooks and email templates
     */
    transient_payload?: {
        [key: string]: unknown;
    };
    type: SelfServiceFlowType;
    ui: UiContainer;
};

/**
 * Verification flow state (experimental)
 * The experimental state represents the state of a verification flow. This field is EXPERIMENTAL and subject to change!
 */
export type VerificationFlowState = 'choose_method' | 'sent_email' | 'passed_challenge';

export type Version = {
    /**
     * Version is the service's version.
     */
    version?: string;
};

export type WebAuthnJavaScript = string;

export type GetWebAuthnJavaScriptData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/.well-known/ory/webauthn.js';
};

export type GetWebAuthnJavaScriptResponses = {
    /**
     * webAuthnJavaScript
     */
    200: WebAuthnJavaScript;
};

export type GetWebAuthnJavaScriptResponse = GetWebAuthnJavaScriptResponses[keyof GetWebAuthnJavaScriptResponses];

export type ListCourierMessagesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Items per Page
         *
         * This is the number of items per page to return.
         * For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_size?: number;
        /**
         * Next Page Token
         *
         * The next page token.
         * For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_token?: string;
        /**
         * Status filters out messages based on status.
         * If no value is provided, it doesn't take effect on filter.
         */
        status?: CourierMessageStatus;
        /**
         * Recipient filters out messages based on recipient.
         * If no value is provided, it doesn't take effect on filter.
         */
        recipient?: string;
    };
    url: '/admin/courier/messages';
};

export type ListCourierMessagesErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type ListCourierMessagesError = ListCourierMessagesErrors[keyof ListCourierMessagesErrors];

export type ListCourierMessagesResponses = {
    /**
     * Paginated Courier Message List Response
     */
    200: Array<Message>;
};

export type ListCourierMessagesResponse = ListCourierMessagesResponses[keyof ListCourierMessagesResponses];

export type GetCourierMessageData = {
    body?: never;
    path: {
        /**
         * MessageID is the ID of the message.
         */
        id: string;
    };
    query?: never;
    url: '/admin/courier/messages/{id}';
};

export type GetCourierMessageErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type GetCourierMessageError = GetCourierMessageErrors[keyof GetCourierMessageErrors];

export type GetCourierMessageResponses = {
    /**
     * message
     */
    200: Message;
};

export type GetCourierMessageResponse = GetCourierMessageResponses[keyof GetCourierMessageResponses];

export type ListIdentitiesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Deprecated Items per Page
         *
         * DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.
         *
         * This is the number of items per page.
         */
        per_page?: number;
        /**
         * Deprecated Pagination Page
         *
         * DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.
         *
         * This value is currently an integer, but it is not sequential. The value is not the page number, but a
         * reference. The next page can be any number and some numbers might return an empty list.
         *
         * For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * The first page can be retrieved by omitting this parameter. Following page pointers will be returned in the
         * `Link` header.
         */
        page?: number;
        /**
         * Page Size
         *
         * This is the number of items per page to return. For details on pagination please head over to the
         * [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_size?: number;
        /**
         * Next Page Token
         *
         * The next page token. For details on pagination please head over to the
         * [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_token?: string;
        /**
         * Read Consistency Level (preview)
         *
         * The read consistency level determines the consistency guarantee for reads:
         *
         * strong (slow): The read is guaranteed to return the most recent data committed at the start of the read.
         * eventual (very fast): The result will return data that is about 4.8 seconds old.
         *
         * The default consistency guarantee can be changed in the Ory Network Console or using the Ory CLI with
         * `ory patch project --replace '/previews/default_read_consistency_level="strong"'`.
         *
         * Setting the default consistency level to `eventual` may cause regressions in the future as we add consistency
         * controls to more APIs. Currently, the following APIs will be affected by this setting:
         *
         * `GET /admin/identities`
         *
         * This feature is in preview and only available in Ory Network.
         * ConsistencyLevelUnset  ConsistencyLevelUnset is the unset / default consistency level.
         * strong ConsistencyLevelStrong  ConsistencyLevelStrong is the strong consistency level.
         * eventual ConsistencyLevelEventual  ConsistencyLevelEventual is the eventual consistency level using follower read timestamps.
         */
        consistency?: '' | 'strong' | 'eventual';
        /**
         * Retrieve multiple identities by their IDs.
         *
         * This parameter has the following limitations:
         *
         * Duplicate or non-existent IDs are ignored.
         * The order of returned IDs may be different from the request.
         * This filter does not support pagination. You must implement your own pagination as the maximum number of items returned by this endpoint may not exceed a certain threshold (currently 500).
         */
        ids?: Array<string>;
        /**
         * CredentialsIdentifier is the identifier (username, email) of the credentials to look up using exact match.
         * Only one of CredentialsIdentifier and CredentialsIdentifierSimilar can be used.
         */
        credentials_identifier?: string;
        /**
         * This is an EXPERIMENTAL parameter that WILL CHANGE. Do NOT rely on consistent, deterministic behavior.
         * THIS PARAMETER WILL BE REMOVED IN AN UPCOMING RELEASE WITHOUT ANY MIGRATION PATH.
         *
         * CredentialsIdentifierSimilar is the (partial) identifier (username, email) of the credentials to look up using similarity search.
         * Only one of CredentialsIdentifier and CredentialsIdentifierSimilar can be used.
         */
        preview_credentials_identifier_similar?: string;
        /**
         * Include Credentials in Response
         *
         * Include any credential, for example `password` or `oidc`, in the response. When set to `oidc`, This will return
         * the initial OAuth 2.0 Access Token, OAuth 2.0 Refresh Token and the OpenID Connect ID Token if available.
         */
        include_credential?: Array<string>;
        /**
         * List identities that belong to a specific organization.
         */
        organization_id?: string;
    };
    url: '/admin/identities';
};

export type ListIdentitiesErrors = {
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type ListIdentitiesError = ListIdentitiesErrors[keyof ListIdentitiesErrors];

export type ListIdentitiesResponses = {
    /**
     * Paginated Identity List Response
     */
    200: Array<Identity>;
};

export type ListIdentitiesResponse = ListIdentitiesResponses[keyof ListIdentitiesResponses];

export type BatchPatchIdentitiesData = {
    body?: PatchIdentitiesBody;
    path?: never;
    query?: never;
    url: '/admin/identities';
};

export type BatchPatchIdentitiesErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    409: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type BatchPatchIdentitiesError = BatchPatchIdentitiesErrors[keyof BatchPatchIdentitiesErrors];

export type BatchPatchIdentitiesResponses = {
    /**
     * batchPatchIdentitiesResponse
     */
    200: BatchPatchIdentitiesResponse;
};

export type BatchPatchIdentitiesResponse2 = BatchPatchIdentitiesResponses[keyof BatchPatchIdentitiesResponses];

export type CreateIdentityData = {
    body?: CreateIdentityBody;
    path?: never;
    query?: never;
    url: '/admin/identities';
};

export type CreateIdentityErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    409: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateIdentityError = CreateIdentityErrors[keyof CreateIdentityErrors];

export type CreateIdentityResponses = {
    /**
     * identity
     */
    201: Identity;
};

export type CreateIdentityResponse = CreateIdentityResponses[keyof CreateIdentityResponses];

export type DeleteIdentityData = {
    body?: never;
    path: {
        /**
         * ID is the identity's ID.
         */
        id: string;
    };
    query?: never;
    url: '/admin/identities/{id}';
};

export type DeleteIdentityErrors = {
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type DeleteIdentityError = DeleteIdentityErrors[keyof DeleteIdentityErrors];

export type DeleteIdentityResponses = {
    /**
     * Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 204.
     */
    204: void;
};

export type DeleteIdentityResponse = DeleteIdentityResponses[keyof DeleteIdentityResponses];

export type GetIdentityData = {
    body?: never;
    path: {
        /**
         * ID must be set to the ID of identity you want to get
         */
        id: string;
    };
    query?: {
        /**
         * Include Credentials in Response
         *
         * Include any credential, for example `password` or `oidc`, in the response. When set to `oidc`, This will return
         * the initial OAuth 2.0 Access Token, OAuth 2.0 Refresh Token and the OpenID Connect ID Token if available.
         */
        include_credential?: Array<'password' | 'oidc' | 'totp' | 'lookup_secret' | 'webauthn' | 'code' | 'passkey' | 'profile' | 'saml' | 'link_recovery' | 'code_recovery'>;
    };
    url: '/admin/identities/{id}';
};

export type GetIdentityErrors = {
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type GetIdentityError = GetIdentityErrors[keyof GetIdentityErrors];

export type GetIdentityResponses = {
    /**
     * identity
     */
    200: Identity;
};

export type GetIdentityResponse = GetIdentityResponses[keyof GetIdentityResponses];

export type PatchIdentityData = {
    body?: JsonPatchDocument;
    path: {
        /**
         * ID must be set to the ID of identity you want to update
         */
        id: string;
    };
    query?: never;
    url: '/admin/identities/{id}';
};

export type PatchIdentityErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    409: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type PatchIdentityError = PatchIdentityErrors[keyof PatchIdentityErrors];

export type PatchIdentityResponses = {
    /**
     * identity
     */
    200: Identity;
};

export type PatchIdentityResponse = PatchIdentityResponses[keyof PatchIdentityResponses];

export type UpdateIdentityData = {
    body?: UpdateIdentityBody;
    path: {
        /**
         * ID must be set to the ID of identity you want to update
         */
        id: string;
    };
    query?: never;
    url: '/admin/identities/{id}';
};

export type UpdateIdentityErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    409: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type UpdateIdentityError = UpdateIdentityErrors[keyof UpdateIdentityErrors];

export type UpdateIdentityResponses = {
    /**
     * identity
     */
    200: Identity;
};

export type UpdateIdentityResponse = UpdateIdentityResponses[keyof UpdateIdentityResponses];

export type DeleteIdentityCredentialsData = {
    body?: never;
    path: {
        /**
         * ID is the identity's ID.
         */
        id: string;
        /**
         * Type is the type of credentials to delete.
         * password CredentialsTypePassword
         * oidc CredentialsTypeOIDC
         * totp CredentialsTypeTOTP
         * lookup_secret CredentialsTypeLookup
         * webauthn CredentialsTypeWebAuthn
         * code CredentialsTypeCodeAuth
         * passkey CredentialsTypePasskey
         * profile CredentialsTypeProfile
         * saml CredentialsTypeSAML
         * link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
         * code_recovery CredentialsTypeRecoveryCode
         */
        type: 'password' | 'oidc' | 'totp' | 'lookup_secret' | 'webauthn' | 'code' | 'passkey' | 'profile' | 'saml' | 'link_recovery' | 'code_recovery';
    };
    query?: {
        /**
         * Identifier is the identifier of the OIDC credential to delete.
         * Find the identifier by calling the `GET /admin/identities/{id}?include_credential=oidc` endpoint.
         */
        identifier?: string;
    };
    url: '/admin/identities/{id}/credentials/{type}';
};

export type DeleteIdentityCredentialsErrors = {
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type DeleteIdentityCredentialsError = DeleteIdentityCredentialsErrors[keyof DeleteIdentityCredentialsErrors];

export type DeleteIdentityCredentialsResponses = {
    /**
     * Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 204.
     */
    204: void;
};

export type DeleteIdentityCredentialsResponse = DeleteIdentityCredentialsResponses[keyof DeleteIdentityCredentialsResponses];

export type DeleteIdentitySessionsData = {
    body?: never;
    path: {
        /**
         * ID is the identity's ID.
         */
        id: string;
    };
    query?: never;
    url: '/admin/identities/{id}/sessions';
};

export type DeleteIdentitySessionsErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    401: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type DeleteIdentitySessionsError = DeleteIdentitySessionsErrors[keyof DeleteIdentitySessionsErrors];

export type DeleteIdentitySessionsResponses = {
    /**
     * Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 204.
     */
    204: void;
};

export type DeleteIdentitySessionsResponse = DeleteIdentitySessionsResponses[keyof DeleteIdentitySessionsResponses];

export type ListIdentitySessionsData = {
    body?: never;
    path: {
        /**
         * ID is the identity's ID.
         */
        id: string;
    };
    query?: {
        /**
         * Deprecated Items per Page
         *
         * DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.
         *
         * This is the number of items per page.
         */
        per_page?: number;
        /**
         * Deprecated Pagination Page
         *
         * DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.
         *
         * This value is currently an integer, but it is not sequential. The value is not the page number, but a
         * reference. The next page can be any number and some numbers might return an empty list.
         *
         * For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * The first page can be retrieved by omitting this parameter. Following page pointers will be returned in the
         * `Link` header.
         */
        page?: number;
        /**
         * Page Size
         *
         * This is the number of items per page to return. For details on pagination please head over to the
         * [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_size?: number;
        /**
         * Next Page Token
         *
         * The next page token. For details on pagination please head over to the
         * [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_token?: string;
        /**
         * Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
         */
        active?: boolean;
    };
    url: '/admin/identities/{id}/sessions';
};

export type ListIdentitySessionsErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type ListIdentitySessionsError = ListIdentitySessionsErrors[keyof ListIdentitySessionsErrors];

export type ListIdentitySessionsResponses = {
    /**
     * List Identity Sessions Response
     */
    200: Array<Session>;
};

export type ListIdentitySessionsResponse = ListIdentitySessionsResponses[keyof ListIdentitySessionsResponses];

export type CreateRecoveryCodeForIdentityData = {
    body?: CreateRecoveryCodeForIdentityBody;
    path?: never;
    query?: never;
    url: '/admin/recovery/code';
};

export type CreateRecoveryCodeForIdentityErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateRecoveryCodeForIdentityError = CreateRecoveryCodeForIdentityErrors[keyof CreateRecoveryCodeForIdentityErrors];

export type CreateRecoveryCodeForIdentityResponses = {
    /**
     * recoveryCodeForIdentity
     */
    201: RecoveryCodeForIdentity;
};

export type CreateRecoveryCodeForIdentityResponse = CreateRecoveryCodeForIdentityResponses[keyof CreateRecoveryCodeForIdentityResponses];

export type CreateRecoveryLinkForIdentityData = {
    body?: CreateRecoveryLinkForIdentityBody;
    path?: never;
    query?: {
        return_to?: string;
    };
    url: '/admin/recovery/link';
};

export type CreateRecoveryLinkForIdentityErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateRecoveryLinkForIdentityError = CreateRecoveryLinkForIdentityErrors[keyof CreateRecoveryLinkForIdentityErrors];

export type CreateRecoveryLinkForIdentityResponses = {
    /**
     * recoveryLinkForIdentity
     */
    200: RecoveryLinkForIdentity;
};

export type CreateRecoveryLinkForIdentityResponse = CreateRecoveryLinkForIdentityResponses[keyof CreateRecoveryLinkForIdentityResponses];

export type ListSessionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Items per Page
         *
         * This is the number of items per page to return.
         * For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_size?: number;
        /**
         * Next Page Token
         *
         * The next page token.
         * For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_token?: string;
        /**
         * Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
         */
        active?: boolean;
        /**
         * ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session.
         * If no value is provided, the expandable properties are skipped.
         */
        expand?: Array<'identity' | 'devices'>;
    };
    url: '/admin/sessions';
};

export type ListSessionsErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type ListSessionsError = ListSessionsErrors[keyof ListSessionsErrors];

export type ListSessionsResponses = {
    /**
     * Session List Response
     *
     * The response given when listing sessions in an administrative context.
     */
    200: Array<Session>;
};

export type ListSessionsResponse = ListSessionsResponses[keyof ListSessionsResponses];

export type DisableSessionData = {
    body?: never;
    path: {
        /**
         * ID is the session's ID.
         */
        id: string;
    };
    query?: never;
    url: '/admin/sessions/{id}';
};

export type DisableSessionErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    401: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type DisableSessionError = DisableSessionErrors[keyof DisableSessionErrors];

export type DisableSessionResponses = {
    /**
     * Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 204.
     */
    204: void;
};

export type DisableSessionResponse = DisableSessionResponses[keyof DisableSessionResponses];

export type GetSessionData = {
    body?: never;
    path: {
        /**
         * ID is the session's ID.
         */
        id: string;
    };
    query?: {
        /**
         * ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session.
         * Example - ?expand=Identity&expand=Devices
         * If no value is provided, the expandable properties are skipped.
         */
        expand?: Array<'identity' | 'devices'>;
    };
    url: '/admin/sessions/{id}';
};

export type GetSessionErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type GetSessionError = GetSessionErrors[keyof GetSessionErrors];

export type GetSessionResponses = {
    /**
     * session
     */
    200: Session;
};

export type GetSessionResponse = GetSessionResponses[keyof GetSessionResponses];

export type ExtendSessionData = {
    body?: never;
    path: {
        /**
         * ID is the session's ID.
         */
        id: string;
    };
    query?: never;
    url: '/admin/sessions/{id}/extend';
};

export type ExtendSessionErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type ExtendSessionError = ExtendSessionErrors[keyof ExtendSessionErrors];

export type ExtendSessionResponses = {
    /**
     * session
     */
    200: Session;
    /**
     * Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 204.
     */
    204: void;
};

export type ExtendSessionResponse = ExtendSessionResponses[keyof ExtendSessionResponses];

export type IsAliveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/alive';
};

export type IsAliveErrors = {
    /**
     * Unexpected error
     */
    default: string;
};

export type IsAliveError = IsAliveErrors[keyof IsAliveErrors];

export type IsAliveResponses = {
    /**
     * Ory Kratos is ready to accept connections.
     */
    200: {
        /**
         * Always "ok".
         */
        status: string;
    };
};

export type IsAliveResponse = IsAliveResponses[keyof IsAliveResponses];

export type IsReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/ready';
};

export type IsReadyErrors = {
    /**
     * Ory Kratos is not yet ready to accept requests.
     */
    503: {
        /**
         * Errors contains a list of errors that caused the not ready status.
         */
        errors: {
            [key: string]: string;
        };
    };
    /**
     * Unexpected error
     */
    default: string;
};

export type IsReadyError = IsReadyErrors[keyof IsReadyErrors];

export type IsReadyResponses = {
    /**
     * Ory Kratos is ready to accept requests.
     */
    200: {
        /**
         * Always "ok".
         */
        status: string;
    };
};

export type IsReadyResponse = IsReadyResponses[keyof IsReadyResponses];

export type ListIdentitySchemasData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Deprecated Items per Page
         *
         * DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.
         *
         * This is the number of items per page.
         */
        per_page?: number;
        /**
         * Deprecated Pagination Page
         *
         * DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.
         *
         * This value is currently an integer, but it is not sequential. The value is not the page number, but a
         * reference. The next page can be any number and some numbers might return an empty list.
         *
         * For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * The first page can be retrieved by omitting this parameter. Following page pointers will be returned in the
         * `Link` header.
         */
        page?: number;
        /**
         * Page Size
         *
         * This is the number of items per page to return. For details on pagination please head over to the
         * [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_size?: number;
        /**
         * Next Page Token
         *
         * The next page token. For details on pagination please head over to the
         * [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_token?: string;
    };
    url: '/schemas';
};

export type ListIdentitySchemasErrors = {
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type ListIdentitySchemasError = ListIdentitySchemasErrors[keyof ListIdentitySchemasErrors];

export type ListIdentitySchemasResponses = {
    /**
     * List Identity JSON Schemas Response
     */
    200: IdentitySchemas;
};

export type ListIdentitySchemasResponse = ListIdentitySchemasResponses[keyof ListIdentitySchemasResponses];

export type GetIdentitySchemaData = {
    body?: never;
    path: {
        /**
         * ID must be set to the ID of schema you want to get
         */
        id: string;
    };
    query?: never;
    url: '/schemas/{id}';
};

export type GetIdentitySchemaErrors = {
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type GetIdentitySchemaError = GetIdentitySchemaErrors[keyof GetIdentitySchemaErrors];

export type GetIdentitySchemaResponses = {
    /**
     * identitySchema
     */
    200: IdentitySchema;
};

export type GetIdentitySchemaResponse = GetIdentitySchemaResponses[keyof GetIdentitySchemaResponses];

export type GetFlowErrorData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Error is the error's ID
         */
        id: string;
    };
    url: '/self-service/errors';
};

export type GetFlowErrorErrors = {
    /**
     * errorGeneric
     */
    403: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    500: ErrorGeneric;
};

export type GetFlowErrorError = GetFlowErrorErrors[keyof GetFlowErrorErrors];

export type GetFlowErrorResponses = {
    /**
     * flowError
     */
    200: FlowError;
};

export type GetFlowErrorResponse = GetFlowErrorResponses[keyof GetFlowErrorResponses];

export type CreateFedcmFlowData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/self-service/fed-cm/parameters';
};

export type CreateFedcmFlowErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateFedcmFlowError = CreateFedcmFlowErrors[keyof CreateFedcmFlowErrors];

export type CreateFedcmFlowResponses = {
    /**
     * createFedcmFlowResponse
     */
    200: CreateFedcmFlowResponse;
};

export type CreateFedcmFlowResponse2 = CreateFedcmFlowResponses[keyof CreateFedcmFlowResponses];

export type UpdateFedcmFlowData = {
    body: UpdateFedcmFlowBody;
    path?: never;
    query?: never;
    url: '/self-service/fed-cm/token';
};

export type UpdateFedcmFlowErrors = {
    /**
     * loginFlow
     */
    400: LoginFlow;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorBrowserLocationChangeRequired
     */
    422: ErrorBrowserLocationChangeRequired;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type UpdateFedcmFlowError = UpdateFedcmFlowErrors[keyof UpdateFedcmFlowErrors];

export type UpdateFedcmFlowResponses = {
    /**
     * successfulNativeLogin
     */
    200: SuccessfulNativeLogin;
};

export type UpdateFedcmFlowResponse = UpdateFedcmFlowResponses[keyof UpdateFedcmFlowResponses];

export type UpdateLoginFlowData = {
    body: UpdateLoginFlowBody;
    headers?: {
        /**
         * The Session Token of the Identity performing the settings flow.
         */
        'X-Session-Token'?: string;
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query: {
        /**
         * The Login Flow ID
         *
         * The value for this parameter comes from `flow` URL Query parameter sent to your
         * application (e.g. `/login?flow=abcde`).
         */
        flow: string;
    };
    url: '/self-service/login';
};

export type UpdateLoginFlowErrors = {
    /**
     * loginFlow
     */
    400: LoginFlow;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorBrowserLocationChangeRequired
     */
    422: ErrorBrowserLocationChangeRequired;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type UpdateLoginFlowError = UpdateLoginFlowErrors[keyof UpdateLoginFlowErrors];

export type UpdateLoginFlowResponses = {
    /**
     * successfulNativeLogin
     */
    200: SuccessfulNativeLogin;
};

export type UpdateLoginFlowResponse = UpdateLoginFlowResponses[keyof UpdateLoginFlowResponses];

export type CreateNativeLoginFlowData = {
    body?: never;
    headers?: {
        /**
         * The Session Token of the Identity performing the settings flow.
         */
        'X-Session-Token'?: string;
    };
    path?: never;
    query?: {
        /**
         * Refresh a login session
         *
         * If set to true, this will refresh an existing login session by
         * asking the user to sign in again. This will reset the
         * authenticated_at time of the session.
         */
        refresh?: boolean;
        /**
         * Request a Specific AuthenticationMethod Assurance Level
         *
         * Use this parameter to upgrade an existing session's authenticator assurance level (AAL). This
         * allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password,
         * the AAL is 1. If you wish to "upgrade" the session's security by asking the user to perform TOTP / WebAuth/ ...
         * you would set this to "aal2".
         */
        aal?: string;
        /**
         * EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token
         * after the login flow has been completed.
         */
        return_session_token_exchange_code?: boolean;
        /**
         * The URL to return the browser to after the flow was completed.
         */
        return_to?: string;
        /**
         * An optional organization ID that should be used for logging this user in.
         * This parameter is only effective in the Ory Network.
         */
        organization?: string;
        /**
         * Via should contain the identity's credential the code should be sent to. Only relevant in aal2 flows.
         *
         * DEPRECATED: This field is deprecated. Please remove it from your requests. The user will now see a choice
         * of MFA credentials to choose from to perform the second factor instead.
         */
        via?: string;
    };
    url: '/self-service/login/api';
};

export type CreateNativeLoginFlowErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateNativeLoginFlowError = CreateNativeLoginFlowErrors[keyof CreateNativeLoginFlowErrors];

export type CreateNativeLoginFlowResponses = {
    /**
     * loginFlow
     */
    200: LoginFlow;
};

export type CreateNativeLoginFlowResponse = CreateNativeLoginFlowResponses[keyof CreateNativeLoginFlowResponses];

export type CreateBrowserLoginFlowData = {
    body?: never;
    headers?: {
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query?: {
        /**
         * Refresh a login session
         *
         * If set to true, this will refresh an existing login session by
         * asking the user to sign in again. This will reset the
         * authenticated_at time of the session.
         */
        refresh?: boolean;
        /**
         * Request a Specific AuthenticationMethod Assurance Level
         *
         * Use this parameter to upgrade an existing session's authenticator assurance level (AAL). This
         * allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password,
         * the AAL is 1. If you wish to "upgrade" the session's security by asking the user to perform TOTP / WebAuth/ ...
         * you would set this to "aal2".
         */
        aal?: string;
        /**
         * The URL to return the browser to after the flow was completed.
         */
        return_to?: string;
        /**
         * An optional Hydra login challenge. If present, Kratos will cooperate with
         * Ory Hydra to act as an OAuth2 identity provider.
         *
         * The value for this parameter comes from `login_challenge` URL Query parameter sent to your
         * application (e.g. `/login?login_challenge=abcde`).
         */
        login_challenge?: string;
        /**
         * An optional organization ID that should be used for logging this user in.
         * This parameter is only effective in the Ory Network.
         */
        organization?: string;
        /**
         * Via should contain the identity's credential the code should be sent to. Only relevant in aal2 flows.
         *
         * DEPRECATED: This field is deprecated. Please remove it from your requests. The user will now see a choice
         * of MFA credentials to choose from to perform the second factor instead.
         */
        via?: string;
    };
    url: '/self-service/login/browser';
};

export type CreateBrowserLoginFlowErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateBrowserLoginFlowError = CreateBrowserLoginFlowErrors[keyof CreateBrowserLoginFlowErrors];

export type CreateBrowserLoginFlowResponses = {
    /**
     * loginFlow
     */
    200: LoginFlow;
};

export type CreateBrowserLoginFlowResponse = CreateBrowserLoginFlowResponses[keyof CreateBrowserLoginFlowResponses];

export type GetLoginFlowData = {
    body?: never;
    headers?: {
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query: {
        /**
         * The Login Flow ID
         *
         * The value for this parameter comes from `flow` URL Query parameter sent to your
         * application (e.g. `/login?flow=abcde`).
         */
        id: string;
    };
    url: '/self-service/login/flows';
};

export type GetLoginFlowErrors = {
    /**
     * errorGeneric
     */
    403: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type GetLoginFlowError = GetLoginFlowErrors[keyof GetLoginFlowErrors];

export type GetLoginFlowResponses = {
    /**
     * loginFlow
     */
    200: LoginFlow;
};

export type GetLoginFlowResponse = GetLoginFlowResponses[keyof GetLoginFlowResponses];

export type UpdateLogoutFlowData = {
    body?: never;
    headers?: {
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query?: {
        /**
         * A Valid Logout Token
         *
         * If you do not have a logout token because you only have a session cookie,
         * call `/self-service/logout/browser` to generate a URL for this endpoint.
         */
        token?: string;
        /**
         * The URL to return to after the logout was completed.
         */
        return_to?: string;
    };
    url: '/self-service/logout';
};

export type UpdateLogoutFlowErrors = {
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type UpdateLogoutFlowError = UpdateLogoutFlowErrors[keyof UpdateLogoutFlowErrors];

export type UpdateLogoutFlowResponses = {
    /**
     * Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 204.
     */
    204: void;
};

export type UpdateLogoutFlowResponse = UpdateLogoutFlowResponses[keyof UpdateLogoutFlowResponses];

export type PerformNativeLogoutData = {
    body: PerformNativeLogoutBody;
    path?: never;
    query?: never;
    url: '/self-service/logout/api';
};

export type PerformNativeLogoutErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type PerformNativeLogoutError = PerformNativeLogoutErrors[keyof PerformNativeLogoutErrors];

export type PerformNativeLogoutResponses = {
    /**
     * Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 204.
     */
    204: void;
};

export type PerformNativeLogoutResponse = PerformNativeLogoutResponses[keyof PerformNativeLogoutResponses];

export type CreateBrowserLogoutFlowData = {
    body?: never;
    headers?: {
        /**
         * HTTP Cookies
         *
         * If you call this endpoint from a backend, please include the
         * original Cookie header in the request.
         */
        cookie?: string;
    };
    path?: never;
    query?: {
        /**
         * Return to URL
         *
         * The URL to which the browser should be redirected to after the logout
         * has been performed.
         */
        return_to?: string;
    };
    url: '/self-service/logout/browser';
};

export type CreateBrowserLogoutFlowErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    401: ErrorGeneric;
    /**
     * errorGeneric
     */
    500: ErrorGeneric;
};

export type CreateBrowserLogoutFlowError = CreateBrowserLogoutFlowErrors[keyof CreateBrowserLogoutFlowErrors];

export type CreateBrowserLogoutFlowResponses = {
    /**
     * logoutFlow
     */
    200: LogoutFlow;
};

export type CreateBrowserLogoutFlowResponse = CreateBrowserLogoutFlowResponses[keyof CreateBrowserLogoutFlowResponses];

export type UpdateRecoveryFlowData = {
    body: UpdateRecoveryFlowBody;
    headers?: {
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query: {
        /**
         * The Recovery Flow ID
         *
         * The value for this parameter comes from `flow` URL Query parameter sent to your
         * application (e.g. `/recovery?flow=abcde`).
         */
        flow: string;
        /**
         * Recovery Token
         *
         * The recovery token which completes the recovery request. If the token
         * is invalid (e.g. expired) an error will be shown to the end-user.
         *
         * This parameter is usually set in a link and not used by any direct API call.
         */
        token?: string;
    };
    url: '/self-service/recovery';
};

export type UpdateRecoveryFlowErrors = {
    /**
     * recoveryFlow
     */
    400: RecoveryFlow;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorBrowserLocationChangeRequired
     */
    422: ErrorBrowserLocationChangeRequired;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type UpdateRecoveryFlowError = UpdateRecoveryFlowErrors[keyof UpdateRecoveryFlowErrors];

export type UpdateRecoveryFlowResponses = {
    /**
     * recoveryFlow
     */
    200: RecoveryFlow;
};

export type UpdateRecoveryFlowResponse = UpdateRecoveryFlowResponses[keyof UpdateRecoveryFlowResponses];

export type CreateNativeRecoveryFlowData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/self-service/recovery/api';
};

export type CreateNativeRecoveryFlowErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateNativeRecoveryFlowError = CreateNativeRecoveryFlowErrors[keyof CreateNativeRecoveryFlowErrors];

export type CreateNativeRecoveryFlowResponses = {
    /**
     * recoveryFlow
     */
    200: RecoveryFlow;
};

export type CreateNativeRecoveryFlowResponse = CreateNativeRecoveryFlowResponses[keyof CreateNativeRecoveryFlowResponses];

export type CreateBrowserRecoveryFlowData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The URL to return the browser to after the flow was completed.
         */
        return_to?: string;
    };
    url: '/self-service/recovery/browser';
};

export type CreateBrowserRecoveryFlowErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateBrowserRecoveryFlowError = CreateBrowserRecoveryFlowErrors[keyof CreateBrowserRecoveryFlowErrors];

export type CreateBrowserRecoveryFlowResponses = {
    /**
     * recoveryFlow
     */
    200: RecoveryFlow;
};

export type CreateBrowserRecoveryFlowResponse = CreateBrowserRecoveryFlowResponses[keyof CreateBrowserRecoveryFlowResponses];

export type GetRecoveryFlowData = {
    body?: never;
    headers?: {
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query: {
        /**
         * The Flow ID
         *
         * The value for this parameter comes from `request` URL Query parameter sent to your
         * application (e.g. `/recovery?flow=abcde`).
         */
        id: string;
    };
    url: '/self-service/recovery/flows';
};

export type GetRecoveryFlowErrors = {
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type GetRecoveryFlowError = GetRecoveryFlowErrors[keyof GetRecoveryFlowErrors];

export type GetRecoveryFlowResponses = {
    /**
     * recoveryFlow
     */
    200: RecoveryFlow;
};

export type GetRecoveryFlowResponse = GetRecoveryFlowResponses[keyof GetRecoveryFlowResponses];

export type UpdateRegistrationFlowData = {
    body: UpdateRegistrationFlowBody;
    headers?: {
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query: {
        /**
         * The Registration Flow ID
         *
         * The value for this parameter comes from `flow` URL Query parameter sent to your
         * application (e.g. `/registration?flow=abcde`).
         */
        flow: string;
    };
    url: '/self-service/registration';
};

export type UpdateRegistrationFlowErrors = {
    /**
     * registrationFlow
     */
    400: RegistrationFlow;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorBrowserLocationChangeRequired
     */
    422: ErrorBrowserLocationChangeRequired;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type UpdateRegistrationFlowError = UpdateRegistrationFlowErrors[keyof UpdateRegistrationFlowErrors];

export type UpdateRegistrationFlowResponses = {
    /**
     * successfulNativeRegistration
     */
    200: SuccessfulNativeRegistration;
};

export type UpdateRegistrationFlowResponse = UpdateRegistrationFlowResponses[keyof UpdateRegistrationFlowResponses];

export type CreateNativeRegistrationFlowData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token
         * after the login flow has been completed.
         */
        return_session_token_exchange_code?: boolean;
        /**
         * The URL to return the browser to after the flow was completed.
         */
        return_to?: string;
        /**
         * An optional organization ID that should be used to register this user.
         * This parameter is only effective in the Ory Network.
         */
        organization?: string;
    };
    url: '/self-service/registration/api';
};

export type CreateNativeRegistrationFlowErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateNativeRegistrationFlowError = CreateNativeRegistrationFlowErrors[keyof CreateNativeRegistrationFlowErrors];

export type CreateNativeRegistrationFlowResponses = {
    /**
     * registrationFlow
     */
    200: RegistrationFlow;
};

export type CreateNativeRegistrationFlowResponse = CreateNativeRegistrationFlowResponses[keyof CreateNativeRegistrationFlowResponses];

export type CreateBrowserRegistrationFlowData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The URL to return the browser to after the flow was completed.
         */
        return_to?: string;
        /**
         * Ory OAuth 2.0 Login Challenge.
         *
         * If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.
         *
         * The value for this parameter comes from `login_challenge` URL Query parameter sent to your
         * application (e.g. `/registration?login_challenge=abcde`).
         *
         * This feature is compatible with Ory Hydra when not running on the Ory Network.
         */
        login_challenge?: string;
        /**
         * The URL to return the browser to after the verification flow was completed.
         *
         * After the registration flow is completed, the user will be sent a verification email.
         * Upon completing the verification flow, this URL will be used to override the default
         * `selfservice.flows.verification.after.default_redirect_to` value.
         */
        after_verification_return_to?: string;
        /**
         * An optional organization ID that should be used to register this user.
         * This parameter is only effective in the Ory Network.
         */
        organization?: string;
    };
    url: '/self-service/registration/browser';
};

export type CreateBrowserRegistrationFlowErrors = {
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateBrowserRegistrationFlowError = CreateBrowserRegistrationFlowErrors[keyof CreateBrowserRegistrationFlowErrors];

export type CreateBrowserRegistrationFlowResponses = {
    /**
     * registrationFlow
     */
    200: RegistrationFlow;
};

export type CreateBrowserRegistrationFlowResponse = CreateBrowserRegistrationFlowResponses[keyof CreateBrowserRegistrationFlowResponses];

export type GetRegistrationFlowData = {
    body?: never;
    headers?: {
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query: {
        /**
         * The Registration Flow ID
         *
         * The value for this parameter comes from `flow` URL Query parameter sent to your
         * application (e.g. `/registration?flow=abcde`).
         */
        id: string;
    };
    url: '/self-service/registration/flows';
};

export type GetRegistrationFlowErrors = {
    /**
     * errorGeneric
     */
    403: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type GetRegistrationFlowError = GetRegistrationFlowErrors[keyof GetRegistrationFlowErrors];

export type GetRegistrationFlowResponses = {
    /**
     * registrationFlow
     */
    200: RegistrationFlow;
};

export type GetRegistrationFlowResponse = GetRegistrationFlowResponses[keyof GetRegistrationFlowResponses];

export type UpdateSettingsFlowData = {
    body: UpdateSettingsFlowBody;
    headers?: {
        /**
         * The Session Token of the Identity performing the settings flow.
         */
        'X-Session-Token'?: string;
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query: {
        /**
         * The Settings Flow ID
         *
         * The value for this parameter comes from `flow` URL Query parameter sent to your
         * application (e.g. `/settings?flow=abcde`).
         */
        flow: string;
    };
    url: '/self-service/settings';
};

export type UpdateSettingsFlowErrors = {
    /**
     * settingsFlow
     */
    400: SettingsFlow;
    /**
     * errorGeneric
     */
    401: ErrorGeneric;
    /**
     * errorGeneric
     */
    403: ErrorGeneric;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorBrowserLocationChangeRequired
     */
    422: ErrorBrowserLocationChangeRequired;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type UpdateSettingsFlowError = UpdateSettingsFlowErrors[keyof UpdateSettingsFlowErrors];

export type UpdateSettingsFlowResponses = {
    /**
     * settingsFlow
     */
    200: SettingsFlow;
};

export type UpdateSettingsFlowResponse = UpdateSettingsFlowResponses[keyof UpdateSettingsFlowResponses];

export type CreateNativeSettingsFlowData = {
    body?: never;
    headers?: {
        /**
         * The Session Token of the Identity performing the settings flow.
         */
        'X-Session-Token'?: string;
    };
    path?: never;
    query?: never;
    url: '/self-service/settings/api';
};

export type CreateNativeSettingsFlowErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateNativeSettingsFlowError = CreateNativeSettingsFlowErrors[keyof CreateNativeSettingsFlowErrors];

export type CreateNativeSettingsFlowResponses = {
    /**
     * settingsFlow
     */
    200: SettingsFlow;
};

export type CreateNativeSettingsFlowResponse = CreateNativeSettingsFlowResponses[keyof CreateNativeSettingsFlowResponses];

export type CreateBrowserSettingsFlowData = {
    body?: never;
    headers?: {
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query?: {
        /**
         * The URL to return the browser to after the flow was completed.
         */
        return_to?: string;
    };
    url: '/self-service/settings/browser';
};

export type CreateBrowserSettingsFlowErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    401: ErrorGeneric;
    /**
     * errorGeneric
     */
    403: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateBrowserSettingsFlowError = CreateBrowserSettingsFlowErrors[keyof CreateBrowserSettingsFlowErrors];

export type CreateBrowserSettingsFlowResponses = {
    /**
     * settingsFlow
     */
    200: SettingsFlow;
};

export type CreateBrowserSettingsFlowResponse = CreateBrowserSettingsFlowResponses[keyof CreateBrowserSettingsFlowResponses];

export type GetSettingsFlowData = {
    body?: never;
    headers?: {
        /**
         * The Session Token
         *
         * When using the SDK in an app without a browser, please include the
         * session token here.
         */
        'X-Session-Token'?: string;
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query: {
        /**
         * ID is the Settings Flow ID
         *
         * The value for this parameter comes from `flow` URL Query parameter sent to your
         * application (e.g. `/settings?flow=abcde`).
         */
        id: string;
    };
    url: '/self-service/settings/flows';
};

export type GetSettingsFlowErrors = {
    /**
     * errorGeneric
     */
    401: ErrorGeneric;
    /**
     * errorGeneric
     */
    403: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type GetSettingsFlowError = GetSettingsFlowErrors[keyof GetSettingsFlowErrors];

export type GetSettingsFlowResponses = {
    /**
     * settingsFlow
     */
    200: SettingsFlow;
};

export type GetSettingsFlowResponse = GetSettingsFlowResponses[keyof GetSettingsFlowResponses];

export type UpdateVerificationFlowData = {
    body: UpdateVerificationFlowBody;
    headers?: {
        /**
         * HTTP Cookies
         *
         * When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header
         * sent by the client to your server here. This ensures that CSRF and session cookies are respected.
         */
        Cookie?: string;
    };
    path?: never;
    query: {
        /**
         * The Verification Flow ID
         *
         * The value for this parameter comes from `flow` URL Query parameter sent to your
         * application (e.g. `/verification?flow=abcde`).
         */
        flow: string;
        /**
         * Verification Token
         *
         * The verification token which completes the verification request. If the token
         * is invalid (e.g. expired) an error will be shown to the end-user.
         *
         * This parameter is usually set in a link and not used by any direct API call.
         */
        token?: string;
    };
    url: '/self-service/verification';
};

export type UpdateVerificationFlowErrors = {
    /**
     * verificationFlow
     */
    400: VerificationFlow;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type UpdateVerificationFlowError = UpdateVerificationFlowErrors[keyof UpdateVerificationFlowErrors];

export type UpdateVerificationFlowResponses = {
    /**
     * verificationFlow
     */
    200: VerificationFlow;
};

export type UpdateVerificationFlowResponse = UpdateVerificationFlowResponses[keyof UpdateVerificationFlowResponses];

export type CreateNativeVerificationFlowData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A URL contained in the return_to key of the verification flow.
         * This piece of data has no effect on the actual logic of the flow and is purely informational.
         */
        return_to?: string;
    };
    url: '/self-service/verification/api';
};

export type CreateNativeVerificationFlowErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateNativeVerificationFlowError = CreateNativeVerificationFlowErrors[keyof CreateNativeVerificationFlowErrors];

export type CreateNativeVerificationFlowResponses = {
    /**
     * verificationFlow
     */
    200: VerificationFlow;
};

export type CreateNativeVerificationFlowResponse = CreateNativeVerificationFlowResponses[keyof CreateNativeVerificationFlowResponses];

export type CreateBrowserVerificationFlowData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The URL to return the browser to after the flow was completed.
         */
        return_to?: string;
    };
    url: '/self-service/verification/browser';
};

export type CreateBrowserVerificationFlowErrors = {
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type CreateBrowserVerificationFlowError = CreateBrowserVerificationFlowErrors[keyof CreateBrowserVerificationFlowErrors];

export type CreateBrowserVerificationFlowResponses = {
    /**
     * verificationFlow
     */
    200: VerificationFlow;
};

export type CreateBrowserVerificationFlowResponse = CreateBrowserVerificationFlowResponses[keyof CreateBrowserVerificationFlowResponses];

export type GetVerificationFlowData = {
    body?: never;
    headers?: {
        /**
         * HTTP Cookies
         *
         * When using the SDK on the server side you must include the HTTP Cookie Header
         * originally sent to your HTTP handler here.
         */
        cookie?: string;
    };
    path?: never;
    query: {
        /**
         * The Flow ID
         *
         * The value for this parameter comes from `request` URL Query parameter sent to your
         * application (e.g. `/verification?flow=abcde`).
         */
        id: string;
    };
    url: '/self-service/verification/flows';
};

export type GetVerificationFlowErrors = {
    /**
     * errorGeneric
     */
    403: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type GetVerificationFlowError = GetVerificationFlowErrors[keyof GetVerificationFlowErrors];

export type GetVerificationFlowResponses = {
    /**
     * verificationFlow
     */
    200: VerificationFlow;
};

export type GetVerificationFlowResponse = GetVerificationFlowResponses[keyof GetVerificationFlowResponses];

export type DisableMyOtherSessionsData = {
    body?: never;
    headers?: {
        /**
         * Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
         */
        'X-Session-Token'?: string;
        /**
         * Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that
         * scenario you must include the HTTP Cookie Header which originally was included in the request to your server.
         * An example of a session in the HTTP Cookie Header is: `ory_kratos_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f==`.
         *
         * It is ok if more than one cookie are included here as all other cookies will be ignored.
         */
        Cookie?: string;
    };
    path?: never;
    query?: never;
    url: '/sessions';
};

export type DisableMyOtherSessionsErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    401: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type DisableMyOtherSessionsError = DisableMyOtherSessionsErrors[keyof DisableMyOtherSessionsErrors];

export type DisableMyOtherSessionsResponses = {
    /**
     * deleteMySessionsCount
     */
    200: DeleteMySessionsCount;
};

export type DisableMyOtherSessionsResponse = DisableMyOtherSessionsResponses[keyof DisableMyOtherSessionsResponses];

export type ListMySessionsData = {
    body?: never;
    headers?: {
        /**
         * Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
         */
        'X-Session-Token'?: string;
        /**
         * Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that
         * scenario you must include the HTTP Cookie Header which originally was included in the request to your server.
         * An example of a session in the HTTP Cookie Header is: `ory_kratos_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f==`.
         *
         * It is ok if more than one cookie are included here as all other cookies will be ignored.
         */
        Cookie?: string;
    };
    path?: never;
    query?: {
        /**
         * Deprecated Items per Page
         *
         * DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.
         *
         * This is the number of items per page.
         */
        per_page?: number;
        /**
         * Deprecated Pagination Page
         *
         * DEPRECATED: Please use `page_token` instead. This parameter will be removed in the future.
         *
         * This value is currently an integer, but it is not sequential. The value is not the page number, but a
         * reference. The next page can be any number and some numbers might return an empty list.
         *
         * For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist.
         * The first page can be retrieved by omitting this parameter. Following page pointers will be returned in the
         * `Link` header.
         */
        page?: number;
        /**
         * Page Size
         *
         * This is the number of items per page to return. For details on pagination please head over to the
         * [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_size?: number;
        /**
         * Next Page Token
         *
         * The next page token. For details on pagination please head over to the
         * [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
         */
        page_token?: string;
    };
    url: '/sessions';
};

export type ListMySessionsErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    401: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type ListMySessionsError = ListMySessionsErrors[keyof ListMySessionsErrors];

export type ListMySessionsResponses = {
    /**
     * List My Session Response
     */
    200: Array<Session>;
};

export type ListMySessionsResponse = ListMySessionsResponses[keyof ListMySessionsResponses];

export type ExchangeSessionTokenData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The part of the code return when initializing the flow.
         */
        init_code: string;
        /**
         * The part of the code returned by the return_to URL.
         */
        return_to_code: string;
    };
    url: '/sessions/token-exchange';
};

export type ExchangeSessionTokenErrors = {
    /**
     * errorGeneric
     */
    403: ErrorGeneric;
    /**
     * errorGeneric
     */
    404: ErrorGeneric;
    /**
     * errorGeneric
     */
    410: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type ExchangeSessionTokenError = ExchangeSessionTokenErrors[keyof ExchangeSessionTokenErrors];

export type ExchangeSessionTokenResponses = {
    /**
     * successfulNativeLogin
     */
    200: SuccessfulNativeLogin;
};

export type ExchangeSessionTokenResponse = ExchangeSessionTokenResponses[keyof ExchangeSessionTokenResponses];

export type ToSessionData = {
    body?: never;
    headers?: {
        /**
         * Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
         */
        'X-Session-Token'?: string;
        /**
         * Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that
         * scenario you must include the HTTP Cookie Header which originally was included in the request to your server.
         * An example of a session in the HTTP Cookie Header is: `ory_kratos_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f==`.
         *
         * It is ok if more than one cookie are included here as all other cookies will be ignored.
         */
        Cookie?: string;
    };
    path?: never;
    query?: {
        /**
         * Returns the session additionally as a token (such as a JWT)
         *
         * The value of this parameter has to be a valid, configured Ory Session token template. For more information head over to [the documentation](http://ory.sh/docs/identities/session-to-jwt-cors).
         */
        tokenize_as?: string;
    };
    url: '/sessions/whoami';
};

export type ToSessionErrors = {
    /**
     * errorGeneric
     */
    401: ErrorGeneric;
    /**
     * errorGeneric
     */
    403: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type ToSessionError = ToSessionErrors[keyof ToSessionErrors];

export type ToSessionResponses = {
    /**
     * session
     */
    200: Session;
};

export type ToSessionResponse = ToSessionResponses[keyof ToSessionResponses];

export type DisableMySessionData = {
    body?: never;
    headers?: {
        /**
         * Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.
         */
        'X-Session-Token'?: string;
        /**
         * Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that
         * scenario you must include the HTTP Cookie Header which originally was included in the request to your server.
         * An example of a session in the HTTP Cookie Header is: `ory_kratos_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f==`.
         *
         * It is ok if more than one cookie are included here as all other cookies will be ignored.
         */
        Cookie?: string;
    };
    path: {
        /**
         * ID is the session's ID.
         */
        id: string;
    };
    query?: never;
    url: '/sessions/{id}';
};

export type DisableMySessionErrors = {
    /**
     * errorGeneric
     */
    400: ErrorGeneric;
    /**
     * errorGeneric
     */
    401: ErrorGeneric;
    /**
     * errorGeneric
     */
    default: ErrorGeneric;
};

export type DisableMySessionError = DisableMySessionErrors[keyof DisableMySessionErrors];

export type DisableMySessionResponses = {
    /**
     * Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 204.
     */
    204: void;
};

export type DisableMySessionResponse = DisableMySessionResponses[keyof DisableMySessionResponses];

export type GetVersionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/version';
};

export type GetVersionResponses = {
    /**
     * Returns the Ory Kratos version.
     */
    200: {
        /**
         * The version of Ory Kratos.
         */
        version: string;
    };
};

export type GetVersionResponse = GetVersionResponses[keyof GetVersionResponses];

export type ClientOptions = {
    baseURL: 'https://raw.githubusercontent.com' | (string & {});
};