// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type Composable, type TDataShape, type Client, urlSearchParamsBodySerializer } from './client';
import type { DiscoverJsonWebKeysResponse, DiscoverJsonWebKeysData, DiscoverJsonWebKeysError, DiscoverOidcConfigurationResponse, DiscoverOidcConfigurationData, DiscoverOidcConfigurationError, ListOAuth2ClientsResponse, ListOAuth2ClientsData, ListOAuth2ClientsError, CreateOAuth2ClientResponse, CreateOAuth2ClientData, CreateOAuth2ClientError, DeleteOAuth2ClientResponse, DeleteOAuth2ClientData, DeleteOAuth2ClientError, GetOAuth2ClientResponse, GetOAuth2ClientData, GetOAuth2ClientError, PatchOAuth2ClientResponse, PatchOAuth2ClientData, PatchOAuth2ClientError, SetOAuth2ClientResponse, SetOAuth2ClientData, SetOAuth2ClientError, SetOAuth2ClientLifespansResponse, SetOAuth2ClientLifespansData, SetOAuth2ClientLifespansError, DeleteJsonWebKeySetResponse, DeleteJsonWebKeySetData, DeleteJsonWebKeySetError, GetJsonWebKeySetResponse, GetJsonWebKeySetData, GetJsonWebKeySetError, CreateJsonWebKeySetResponse, CreateJsonWebKeySetData, CreateJsonWebKeySetError, SetJsonWebKeySetResponse, SetJsonWebKeySetData, SetJsonWebKeySetError, DeleteJsonWebKeyResponse, DeleteJsonWebKeyData, DeleteJsonWebKeyError, GetJsonWebKeyResponse, GetJsonWebKeyData, GetJsonWebKeyError, SetJsonWebKeyResponse, SetJsonWebKeyData, SetJsonWebKeyError, GetOAuth2ConsentRequestResponse, GetOAuth2ConsentRequestData, GetOAuth2ConsentRequestError, AcceptOAuth2ConsentRequestResponse, AcceptOAuth2ConsentRequestData, AcceptOAuth2ConsentRequestError, RejectOAuth2ConsentRequestResponse, RejectOAuth2ConsentRequestData, RejectOAuth2ConsentRequestError, GetOAuth2LoginRequestResponse, GetOAuth2LoginRequestData, GetOAuth2LoginRequestError, AcceptOAuth2LoginRequestResponse, AcceptOAuth2LoginRequestData, AcceptOAuth2LoginRequestError, RejectOAuth2LoginRequestResponse, RejectOAuth2LoginRequestData, RejectOAuth2LoginRequestError, GetOAuth2LogoutRequestResponse, GetOAuth2LogoutRequestData, GetOAuth2LogoutRequestError, AcceptOAuth2LogoutRequestResponse, AcceptOAuth2LogoutRequestData, AcceptOAuth2LogoutRequestError, RejectOAuth2LogoutRequestResponse, RejectOAuth2LogoutRequestData, RejectOAuth2LogoutRequestError, RevokeOAuth2ConsentSessionsResponse, RevokeOAuth2ConsentSessionsData, RevokeOAuth2ConsentSessionsError, ListOAuth2ConsentSessionsResponse, ListOAuth2ConsentSessionsData, ListOAuth2ConsentSessionsError, RevokeOAuth2LoginSessionsResponse, RevokeOAuth2LoginSessionsData, RevokeOAuth2LoginSessionsError, IntrospectOAuth2TokenResponse, IntrospectOAuth2TokenData, IntrospectOAuth2TokenError, DeleteOAuth2TokenResponse, DeleteOAuth2TokenData, DeleteOAuth2TokenError, ListTrustedOAuth2JwtGrantIssuersResponse, ListTrustedOAuth2JwtGrantIssuersData, ListTrustedOAuth2JwtGrantIssuersError, TrustOAuth2JwtGrantIssuerResponse, TrustOAuth2JwtGrantIssuerData, TrustOAuth2JwtGrantIssuerError, DeleteTrustedOAuth2JwtGrantIssuerResponse, DeleteTrustedOAuth2JwtGrantIssuerData, DeleteTrustedOAuth2JwtGrantIssuerError, GetTrustedOAuth2JwtGrantIssuerResponse, GetTrustedOAuth2JwtGrantIssuerData, GetTrustedOAuth2JwtGrantIssuerError, CreateVerifiableCredentialResponse, CreateVerifiableCredentialData, CreateVerifiableCredentialError, IsAliveResponse, IsAliveData, IsAliveError, IsReadyResponse, IsReadyData, IsReadyError, OAuth2AuthorizeResponse, OAuth2AuthorizeData, OAuth2AuthorizeError, CreateOidcDynamicClientResponse, CreateOidcDynamicClientData, CreateOidcDynamicClientError, DeleteOidcDynamicClientResponse, DeleteOidcDynamicClientData, DeleteOidcDynamicClientError, GetOidcDynamicClientResponse, GetOidcDynamicClientData, GetOidcDynamicClientError, SetOidcDynamicClientResponse, SetOidcDynamicClientData, SetOidcDynamicClientError, RevokeOAuth2TokenData, RevokeOAuth2TokenError, RevokeOidcSessionData, Oauth2TokenExchangeResponse, Oauth2TokenExchangeData, Oauth2TokenExchangeError, GetOidcUserInfoResponse, GetOidcUserInfoData, GetOidcUserInfoError, GetVersionResponse, GetVersionData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TComposable extends Composable, TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Discover Well-Known JSON Web Keys
 * This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and,
 * if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like
 * [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
 *
 * Adding custom keys requires first creating a keyset via the createJsonWebKeySet operation,
 * and then configuring the webfinger.jwks.broadcast_keys configuration value to include the keyset name.
 */
export const discoverJsonWebKeys = <TComposable extends Composable, DefaultT extends DiscoverJsonWebKeysResponse = DiscoverJsonWebKeysResponse>(options: Options<TComposable, DiscoverJsonWebKeysData, DiscoverJsonWebKeysResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, DiscoverJsonWebKeysResponse | DefaultT, DiscoverJsonWebKeysError, DefaultT>({
        url: '/.well-known/jwks.json',
        ...options
    });
};

/**
 * OpenID Connect Discovery
 * A mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.
 *
 * Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others.
 * For a full list of clients go here: https://openid.net/developers/certified/
 */
export const discoverOidcConfiguration = <TComposable extends Composable, DefaultT extends DiscoverOidcConfigurationResponse = DiscoverOidcConfigurationResponse>(options: Options<TComposable, DiscoverOidcConfigurationData, DiscoverOidcConfigurationResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, DiscoverOidcConfigurationResponse | DefaultT, DiscoverOidcConfigurationError, DefaultT>({
        url: '/.well-known/openid-configuration',
        ...options
    });
};

/**
 * List OAuth 2.0 Clients
 * This endpoint lists all clients in the database, and never returns client secrets.
 * As a default it lists the first 100 clients.
 */
export const listOAuth2Clients = <TComposable extends Composable, DefaultT extends ListOAuth2ClientsResponse = ListOAuth2ClientsResponse>(options: Options<TComposable, ListOAuth2ClientsData, ListOAuth2ClientsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListOAuth2ClientsResponse | DefaultT, ListOAuth2ClientsError, DefaultT>({
        url: '/admin/clients',
        ...options
    });
};

/**
 * Create OAuth 2.0 Client
 * Create a new OAuth 2.0 client. If you pass `client_secret` the secret is used, otherwise a random secret
 * is generated. The secret is echoed in the response. It is not possible to retrieve it later on.
 */
export const createOAuth2Client = <TComposable extends Composable, DefaultT extends CreateOAuth2ClientResponse = CreateOAuth2ClientResponse>(options: Options<TComposable, CreateOAuth2ClientData, CreateOAuth2ClientResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, CreateOAuth2ClientResponse | DefaultT, CreateOAuth2ClientError, DefaultT>({
        url: '/admin/clients',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete OAuth 2.0 Client
 * Delete an existing OAuth 2.0 Client by its ID.
 *
 * OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
 * generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
 *
 * Make sure that this endpoint is well protected and only callable by first-party components.
 */
export const deleteOAuth2Client = <TComposable extends Composable, DefaultT extends DeleteOAuth2ClientResponse = DeleteOAuth2ClientResponse>(options: Options<TComposable, DeleteOAuth2ClientData, DeleteOAuth2ClientResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, DeleteOAuth2ClientResponse | DefaultT, DeleteOAuth2ClientError, DefaultT>({
        url: '/admin/clients/{id}',
        ...options
    });
};

/**
 * Get an OAuth 2.0 Client
 * Get an OAuth 2.0 client by its ID. This endpoint never returns the client secret.
 *
 * OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
 * generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
 */
export const getOAuth2Client = <TComposable extends Composable, DefaultT extends GetOAuth2ClientResponse = GetOAuth2ClientResponse>(options: Options<TComposable, GetOAuth2ClientData, GetOAuth2ClientResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetOAuth2ClientResponse | DefaultT, GetOAuth2ClientError, DefaultT>({
        url: '/admin/clients/{id}',
        ...options
    });
};

/**
 * Patch OAuth 2.0 Client
 * Patch an existing OAuth 2.0 Client using JSON Patch. If you pass `client_secret`
 * the secret will be updated and returned via the API. This is the
 * only time you will be able to retrieve the client secret, so write it down and keep it safe.
 *
 * OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
 * generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
 */
export const patchOAuth2Client = <TComposable extends Composable, DefaultT extends PatchOAuth2ClientResponse = PatchOAuth2ClientResponse>(options: Options<TComposable, PatchOAuth2ClientData, PatchOAuth2ClientResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).patch<TComposable, PatchOAuth2ClientResponse | DefaultT, PatchOAuth2ClientError, DefaultT>({
        url: '/admin/clients/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set OAuth 2.0 Client
 * Replaces an existing OAuth 2.0 Client with the payload you send. If you pass `client_secret` the secret is used,
 * otherwise the existing secret is used.
 *
 * If set, the secret is echoed in the response. It is not possible to retrieve it later on.
 *
 * OAuth 2.0 Clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
 * generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
 */
export const setOAuth2Client = <TComposable extends Composable, DefaultT extends SetOAuth2ClientResponse = SetOAuth2ClientResponse>(options: Options<TComposable, SetOAuth2ClientData, SetOAuth2ClientResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, SetOAuth2ClientResponse | DefaultT, SetOAuth2ClientError, DefaultT>({
        url: '/admin/clients/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Set OAuth2 Client Token Lifespans
 * Set lifespans of different token types issued for this OAuth 2.0 client. Does not modify other fields.
 */
export const setOAuth2ClientLifespans = <TComposable extends Composable, DefaultT extends SetOAuth2ClientLifespansResponse = SetOAuth2ClientLifespansResponse>(options: Options<TComposable, SetOAuth2ClientLifespansData, SetOAuth2ClientLifespansResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, SetOAuth2ClientLifespansResponse | DefaultT, SetOAuth2ClientLifespansError, DefaultT>({
        url: '/admin/clients/{id}/lifespans',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete JSON Web Key Set
 * Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.
 *
 * A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
 */
export const deleteJsonWebKeySet = <TComposable extends Composable, DefaultT extends DeleteJsonWebKeySetResponse = DeleteJsonWebKeySetResponse>(options: Options<TComposable, DeleteJsonWebKeySetData, DeleteJsonWebKeySetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, DeleteJsonWebKeySetResponse | DefaultT, DeleteJsonWebKeySetError, DefaultT>({
        url: '/admin/keys/{set}',
        ...options
    });
};

/**
 * Retrieve a JSON Web Key Set
 * This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.
 *
 * A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
 */
export const getJsonWebKeySet = <TComposable extends Composable, DefaultT extends GetJsonWebKeySetResponse = GetJsonWebKeySetResponse>(options: Options<TComposable, GetJsonWebKeySetData, GetJsonWebKeySetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetJsonWebKeySetResponse | DefaultT, GetJsonWebKeySetError, DefaultT>({
        url: '/admin/keys/{set}',
        ...options
    });
};

/**
 * Create JSON Web Key
 * This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.
 *
 * A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
 */
export const createJsonWebKeySet = <TComposable extends Composable, DefaultT extends CreateJsonWebKeySetResponse = CreateJsonWebKeySetResponse>(options: Options<TComposable, CreateJsonWebKeySetData, CreateJsonWebKeySetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, CreateJsonWebKeySetResponse | DefaultT, CreateJsonWebKeySetError, DefaultT>({
        url: '/admin/keys/{set}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update a JSON Web Key Set
 * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.
 *
 * A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
 */
export const setJsonWebKeySet = <TComposable extends Composable, DefaultT extends SetJsonWebKeySetResponse = SetJsonWebKeySetResponse>(options: Options<TComposable, SetJsonWebKeySetData, SetJsonWebKeySetResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, SetJsonWebKeySetResponse | DefaultT, SetJsonWebKeySetError, DefaultT>({
        url: '/admin/keys/{set}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete JSON Web Key
 * Use this endpoint to delete a single JSON Web Key.
 *
 * A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A
 * JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses
 * this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens),
 * and allows storing user-defined keys as well.
 */
export const deleteJsonWebKey = <TComposable extends Composable, DefaultT extends DeleteJsonWebKeyResponse = DeleteJsonWebKeyResponse>(options: Options<TComposable, DeleteJsonWebKeyData, DeleteJsonWebKeyResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, DeleteJsonWebKeyResponse | DefaultT, DeleteJsonWebKeyError, DefaultT>({
        url: '/admin/keys/{set}/{kid}',
        ...options
    });
};

/**
 * Get JSON Web Key
 * This endpoint returns a singular JSON Web Key contained in a set. It is identified by the set and the specific key ID (kid).
 */
export const getJsonWebKey = <TComposable extends Composable, DefaultT extends GetJsonWebKeyResponse = GetJsonWebKeyResponse>(options: Options<TComposable, GetJsonWebKeyData, GetJsonWebKeyResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetJsonWebKeyResponse | DefaultT, GetJsonWebKeyError, DefaultT>({
        url: '/admin/keys/{set}/{kid}',
        ...options
    });
};

/**
 * Set JSON Web Key
 * Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.
 *
 * A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
 */
export const setJsonWebKey = <TComposable extends Composable, DefaultT extends SetJsonWebKeyResponse = SetJsonWebKeyResponse>(options: Options<TComposable, SetJsonWebKeyData, SetJsonWebKeyResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, SetJsonWebKeyResponse | DefaultT, SetJsonWebKeyError, DefaultT>({
        url: '/admin/keys/{set}/{kid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get OAuth 2.0 Consent Request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider
 * to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if
 * the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.
 *
 * The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent
 * provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted
 * or rejected the request.
 *
 * The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please
 * head over to the OAuth 2.0 documentation.
 */
export const getOAuth2ConsentRequest = <TComposable extends Composable, DefaultT extends GetOAuth2ConsentRequestResponse = GetOAuth2ConsentRequestResponse>(options: Options<TComposable, GetOAuth2ConsentRequestData, GetOAuth2ConsentRequestResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetOAuth2ConsentRequestResponse | DefaultT, GetOAuth2ConsentRequestError, DefaultT>({
        url: '/admin/oauth2/auth/requests/consent',
        ...options
    });
};

/**
 * Accept OAuth 2.0 Consent Request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider
 * to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if
 * the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.
 *
 * The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent
 * provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted
 * or rejected the request.
 *
 * This endpoint tells Ory that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf.
 * The consent provider includes additional information, such as session data for access and ID tokens, and if the
 * consent request should be used as basis for future requests.
 *
 * The response contains a redirect URL which the consent provider should redirect the user-agent to.
 *
 * The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please
 * head over to the OAuth 2.0 documentation.
 */
export const acceptOAuth2ConsentRequest = <TComposable extends Composable, DefaultT extends AcceptOAuth2ConsentRequestResponse = AcceptOAuth2ConsentRequestResponse>(options: Options<TComposable, AcceptOAuth2ConsentRequestData, AcceptOAuth2ConsentRequestResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, AcceptOAuth2ConsentRequestResponse | DefaultT, AcceptOAuth2ConsentRequestError, DefaultT>({
        url: '/admin/oauth2/auth/requests/consent/accept',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reject OAuth 2.0 Consent Request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider
 * to authenticate the subject and then tell Ory now about it. If the subject authenticated, he/she must now be asked if
 * the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.
 *
 * The consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent
 * provider uses that challenge to fetch information on the OAuth2 request and then tells Ory if the subject accepted
 * or rejected the request.
 *
 * This endpoint tells Ory that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf.
 * The consent provider must include a reason why the consent was not granted.
 *
 * The response contains a redirect URL which the consent provider should redirect the user-agent to.
 *
 * The default consent provider is available via the Ory Managed Account Experience. To customize the consent provider, please
 * head over to the OAuth 2.0 documentation.
 */
export const rejectOAuth2ConsentRequest = <TComposable extends Composable, DefaultT extends RejectOAuth2ConsentRequestResponse = RejectOAuth2ConsentRequestResponse>(options: Options<TComposable, RejectOAuth2ConsentRequestData, RejectOAuth2ConsentRequestResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, RejectOAuth2ConsentRequestResponse | DefaultT, RejectOAuth2ConsentRequestError, DefaultT>({
        url: '/admin/oauth2/auth/requests/consent/reject',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get OAuth 2.0 Login Request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider
 * to authenticate the subject and then tell the Ory OAuth2 Service about it.
 *
 * Per default, the login provider is Ory itself. You may use a different login provider which needs to be a web-app
 * you write and host, and it must be able to authenticate ("show the subject a login screen")
 * a subject (in OAuth2 the proper name for subject is "resource owner").
 *
 * The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login
 * provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
 */
export const getOAuth2LoginRequest = <TComposable extends Composable, DefaultT extends GetOAuth2LoginRequestResponse = GetOAuth2LoginRequestResponse>(options: Options<TComposable, GetOAuth2LoginRequestData, GetOAuth2LoginRequestResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetOAuth2LoginRequestResponse | DefaultT, GetOAuth2LoginRequestError, DefaultT>({
        url: '/admin/oauth2/auth/requests/login',
        ...options
    });
};

/**
 * Accept OAuth 2.0 Login Request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider
 * to authenticate the subject and then tell the Ory OAuth2 Service about it.
 *
 * The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login
 * provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
 *
 * This endpoint tells Ory that the subject has successfully authenticated and includes additional information such as
 * the subject's ID and if Ory should remember the subject's subject agent for future authentication attempts by setting
 * a cookie.
 *
 * The response contains a redirect URL which the login provider should redirect the user-agent to.
 */
export const acceptOAuth2LoginRequest = <TComposable extends Composable, DefaultT extends AcceptOAuth2LoginRequestResponse = AcceptOAuth2LoginRequestResponse>(options: Options<TComposable, AcceptOAuth2LoginRequestData, AcceptOAuth2LoginRequestResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, AcceptOAuth2LoginRequestResponse | DefaultT, AcceptOAuth2LoginRequestError, DefaultT>({
        url: '/admin/oauth2/auth/requests/login/accept',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reject OAuth 2.0 Login Request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, Ory asks the login provider
 * to authenticate the subject and then tell the Ory OAuth2 Service about it.
 *
 * The authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login
 * provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
 *
 * This endpoint tells Ory that the subject has not authenticated and includes a reason why the authentication
 * was denied.
 *
 * The response contains a redirect URL which the login provider should redirect the user-agent to.
 */
export const rejectOAuth2LoginRequest = <TComposable extends Composable, DefaultT extends RejectOAuth2LoginRequestResponse = RejectOAuth2LoginRequestResponse>(options: Options<TComposable, RejectOAuth2LoginRequestData, RejectOAuth2LoginRequestResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, RejectOAuth2LoginRequestResponse | DefaultT, RejectOAuth2LoginRequestError, DefaultT>({
        url: '/admin/oauth2/auth/requests/login/reject',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get OAuth 2.0 Session Logout Request
 * Use this endpoint to fetch an Ory OAuth 2.0 logout request.
 */
export const getOAuth2LogoutRequest = <TComposable extends Composable, DefaultT extends GetOAuth2LogoutRequestResponse = GetOAuth2LogoutRequestResponse>(options: Options<TComposable, GetOAuth2LogoutRequestData, GetOAuth2LogoutRequestResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetOAuth2LogoutRequestResponse | DefaultT, GetOAuth2LogoutRequestError, DefaultT>({
        url: '/admin/oauth2/auth/requests/logout',
        ...options
    });
};

/**
 * Accept OAuth 2.0 Session Logout Request
 * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to confirm that logout request.
 *
 * The response contains a redirect URL which the consent provider should redirect the user-agent to.
 */
export const acceptOAuth2LogoutRequest = <TComposable extends Composable, DefaultT extends AcceptOAuth2LogoutRequestResponse = AcceptOAuth2LogoutRequestResponse>(options: Options<TComposable, AcceptOAuth2LogoutRequestData, AcceptOAuth2LogoutRequestResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, AcceptOAuth2LogoutRequestResponse | DefaultT, AcceptOAuth2LogoutRequestError, DefaultT>({
        url: '/admin/oauth2/auth/requests/logout/accept',
        ...options
    });
};

/**
 * Reject OAuth 2.0 Session Logout Request
 * When a user or an application requests Ory OAuth 2.0 to remove the session state of a subject, this endpoint is used to deny that logout request.
 * No HTTP request body is required.
 *
 * The response is empty as the logout provider has to chose what action to perform next.
 */
export const rejectOAuth2LogoutRequest = <TComposable extends Composable, DefaultT extends RejectOAuth2LogoutRequestResponse = RejectOAuth2LogoutRequestResponse>(options: Options<TComposable, RejectOAuth2LogoutRequestData, RejectOAuth2LogoutRequestResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, RejectOAuth2LogoutRequestResponse | DefaultT, RejectOAuth2LogoutRequestError, DefaultT>({
        url: '/admin/oauth2/auth/requests/logout/reject',
        ...options
    });
};

/**
 * Revoke OAuth 2.0 Consent Sessions of a Subject
 * This endpoint revokes a subject's granted consent sessions and invalidates all
 * associated OAuth 2.0 Access Tokens. You may also only revoke sessions for a specific OAuth 2.0 Client ID.
 */
export const revokeOAuth2ConsentSessions = <TComposable extends Composable, DefaultT extends RevokeOAuth2ConsentSessionsResponse = RevokeOAuth2ConsentSessionsResponse>(options: Options<TComposable, RevokeOAuth2ConsentSessionsData, RevokeOAuth2ConsentSessionsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, RevokeOAuth2ConsentSessionsResponse | DefaultT, RevokeOAuth2ConsentSessionsError, DefaultT>({
        url: '/admin/oauth2/auth/sessions/consent',
        ...options
    });
};

/**
 * List OAuth 2.0 Consent Sessions of a Subject
 * This endpoint lists all subject's granted consent sessions, including client and granted scope.
 * If the subject is unknown or has not granted any consent sessions yet, the endpoint returns an
 * empty JSON array with status code 200 OK.
 */
export const listOAuth2ConsentSessions = <TComposable extends Composable, DefaultT extends ListOAuth2ConsentSessionsResponse = ListOAuth2ConsentSessionsResponse>(options: Options<TComposable, ListOAuth2ConsentSessionsData, ListOAuth2ConsentSessionsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListOAuth2ConsentSessionsResponse | DefaultT, ListOAuth2ConsentSessionsError, DefaultT>({
        url: '/admin/oauth2/auth/sessions/consent',
        ...options
    });
};

/**
 * Revokes OAuth 2.0 Login Sessions by either a Subject or a SessionID
 * This endpoint invalidates authentication sessions. After revoking the authentication session(s), the subject
 * has to re-authenticate at the Ory OAuth2 Provider. This endpoint does not invalidate any tokens.
 *
 * If you send the subject in a query param, all authentication sessions that belong to that subject are revoked.
 * No OpenID Connect Front- or Back-channel logout is performed in this case.
 *
 * Alternatively, you can send a SessionID via `sid` query param, in which case, only the session that is connected
 * to that SessionID is revoked. OpenID Connect Back-channel logout is performed in this case.
 *
 * When using Ory for the identity provider, the login provider will also invalidate the session cookie.
 */
export const revokeOAuth2LoginSessions = <TComposable extends Composable, DefaultT extends RevokeOAuth2LoginSessionsResponse = RevokeOAuth2LoginSessionsResponse>(options: Options<TComposable, RevokeOAuth2LoginSessionsData, RevokeOAuth2LoginSessionsResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, RevokeOAuth2LoginSessionsResponse | DefaultT, RevokeOAuth2LoginSessionsError, DefaultT>({
        url: '/admin/oauth2/auth/sessions/login',
        ...options
    });
};

/**
 * Introspect OAuth2 Access and Refresh Tokens
 * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token
 * is neither expired nor revoked. If a token is active, additional information on the token will be included. You can
 * set additional data for a token by setting `session.access_token` during the consent flow.
 */
export const introspectOAuth2Token = <TComposable extends Composable, DefaultT extends IntrospectOAuth2TokenResponse = IntrospectOAuth2TokenResponse>(options: Options<TComposable, IntrospectOAuth2TokenData, IntrospectOAuth2TokenResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, IntrospectOAuth2TokenResponse | DefaultT, IntrospectOAuth2TokenError, DefaultT>({
        ...urlSearchParamsBodySerializer,
        url: '/admin/oauth2/introspect',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Delete OAuth 2.0 Access Tokens from specific OAuth 2.0 Client
 * This endpoint deletes OAuth2 access tokens issued to an OAuth 2.0 Client from the database.
 */
export const deleteOAuth2Token = <TComposable extends Composable, DefaultT extends DeleteOAuth2TokenResponse = DeleteOAuth2TokenResponse>(options: Options<TComposable, DeleteOAuth2TokenData, DeleteOAuth2TokenResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, DeleteOAuth2TokenResponse | DefaultT, DeleteOAuth2TokenError, DefaultT>({
        url: '/admin/oauth2/tokens',
        ...options
    });
};

/**
 * List Trusted OAuth2 JWT Bearer Grant Type Issuers
 * Use this endpoint to list all trusted JWT Bearer Grant Type Issuers.
 */
export const listTrustedOAuth2JwtGrantIssuers = <TComposable extends Composable, DefaultT extends ListTrustedOAuth2JwtGrantIssuersResponse = ListTrustedOAuth2JwtGrantIssuersResponse>(options: Options<TComposable, ListTrustedOAuth2JwtGrantIssuersData, ListTrustedOAuth2JwtGrantIssuersResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, ListTrustedOAuth2JwtGrantIssuersResponse | DefaultT, ListTrustedOAuth2JwtGrantIssuersError, DefaultT>({
        url: '/admin/trust/grants/jwt-bearer/issuers',
        ...options
    });
};

/**
 * Trust OAuth2 JWT Bearer Grant Type Issuer
 * Use this endpoint to establish a trust relationship for a JWT issuer
 * to perform JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication
 * and Authorization Grants [RFC7523](https://datatracker.ietf.org/doc/html/rfc7523).
 */
export const trustOAuth2JwtGrantIssuer = <TComposable extends Composable, DefaultT extends TrustOAuth2JwtGrantIssuerResponse = TrustOAuth2JwtGrantIssuerResponse>(options: Options<TComposable, TrustOAuth2JwtGrantIssuerData, TrustOAuth2JwtGrantIssuerResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, TrustOAuth2JwtGrantIssuerResponse | DefaultT, TrustOAuth2JwtGrantIssuerError, DefaultT>({
        url: '/admin/trust/grants/jwt-bearer/issuers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Trusted OAuth2 JWT Bearer Grant Type Issuer
 * Use this endpoint to delete trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you
 * created the trust relationship.
 *
 * Once deleted, the associated issuer will no longer be able to perform the JSON Web Token (JWT) Profile
 * for OAuth 2.0 Client Authentication and Authorization Grant.
 */
export const deleteTrustedOAuth2JwtGrantIssuer = <TComposable extends Composable, DefaultT extends DeleteTrustedOAuth2JwtGrantIssuerResponse = DeleteTrustedOAuth2JwtGrantIssuerResponse>(options: Options<TComposable, DeleteTrustedOAuth2JwtGrantIssuerData, DeleteTrustedOAuth2JwtGrantIssuerResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, DeleteTrustedOAuth2JwtGrantIssuerResponse | DefaultT, DeleteTrustedOAuth2JwtGrantIssuerError, DefaultT>({
        url: '/admin/trust/grants/jwt-bearer/issuers/{id}',
        ...options
    });
};

/**
 * Get Trusted OAuth2 JWT Bearer Grant Type Issuer
 * Use this endpoint to get a trusted JWT Bearer Grant Type Issuer. The ID is the one returned when you
 * created the trust relationship.
 */
export const getTrustedOAuth2JwtGrantIssuer = <TComposable extends Composable, DefaultT extends GetTrustedOAuth2JwtGrantIssuerResponse = GetTrustedOAuth2JwtGrantIssuerResponse>(options: Options<TComposable, GetTrustedOAuth2JwtGrantIssuerData, GetTrustedOAuth2JwtGrantIssuerResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetTrustedOAuth2JwtGrantIssuerResponse | DefaultT, GetTrustedOAuth2JwtGrantIssuerError, DefaultT>({
        url: '/admin/trust/grants/jwt-bearer/issuers/{id}',
        ...options
    });
};

/**
 * Issues a Verifiable Credential
 * This endpoint creates a verifiable credential that attests that the user
 * authenticated with the provided access token owns a certain public/private key
 * pair.
 *
 * More information can be found at
 * https://openid.net/specs/openid-connect-userinfo-vc-1_0.html.
 */
export const createVerifiableCredential = <TComposable extends Composable, DefaultT extends CreateVerifiableCredentialResponse = CreateVerifiableCredentialResponse>(options: Options<TComposable, CreateVerifiableCredentialData, CreateVerifiableCredentialResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, CreateVerifiableCredentialResponse | DefaultT, CreateVerifiableCredentialError, DefaultT>({
        url: '/credentials',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Check HTTP Server Status
 * This endpoint returns a HTTP 200 status code when Ory Hydra is accepting incoming
 * HTTP requests. This status does currently not include checks whether the database connection is working.
 *
 * If the service supports TLS Edge Termination, this endpoint does not require the
 * `X-Forwarded-Proto` header to be set.
 *
 * Be aware that if you are running multiple nodes of this service, the health status will never
 * refer to the cluster state, only to a single instance.
 */
export const isAlive = <TComposable extends Composable, DefaultT extends IsAliveResponse = IsAliveResponse>(options: Options<TComposable, IsAliveData, IsAliveResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, IsAliveResponse | DefaultT, IsAliveError, DefaultT>({
        url: '/health/alive',
        ...options
    });
};

/**
 * Check HTTP Server and Database Status
 * This endpoint returns a HTTP 200 status code when Ory Hydra is up running and the environment dependencies (e.g.
 * the database) are responsive as well.
 *
 * If the service supports TLS Edge Termination, this endpoint does not require the
 * `X-Forwarded-Proto` header to be set.
 *
 * Be aware that if you are running multiple nodes of Ory Hydra, the health status will never
 * refer to the cluster state, only to a single instance.
 */
export const isReady = <TComposable extends Composable, DefaultT extends IsReadyResponse = IsReadyResponse>(options: Options<TComposable, IsReadyData, IsReadyResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, IsReadyResponse | DefaultT, IsReadyError, DefaultT>({
        url: '/health/ready',
        ...options
    });
};

/**
 * OAuth 2.0 Authorize Endpoint
 * Use open source libraries to perform OAuth 2.0 and OpenID Connect
 * available for any programming language. You can find a list of libraries at https://oauth.net/code/
 *
 * This endpoint should not be used via the Ory SDK and is only included for technical reasons.
 * Instead, use one of the libraries linked above.
 */
export const oAuth2Authorize = <TComposable extends Composable, DefaultT extends OAuth2AuthorizeResponse = OAuth2AuthorizeResponse>(options: Options<TComposable, OAuth2AuthorizeData, OAuth2AuthorizeResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, OAuth2AuthorizeResponse | DefaultT, OAuth2AuthorizeError, DefaultT>({
        url: '/oauth2/auth',
        ...options
    });
};

/**
 * Register OAuth2 Client using OpenID Dynamic Client Registration
 * This endpoint behaves like the administrative counterpart (`createOAuth2Client`) but is capable of facing the
 * public internet directly and can be used in self-service. It implements the OpenID Connect
 * Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint
 * is disabled by default. It can be enabled by an administrator.
 *
 * Please note that using this endpoint you are not able to choose the `client_secret` nor the `client_id` as those
 * values will be server generated when specifying `token_endpoint_auth_method` as `client_secret_basic` or
 * `client_secret_post`.
 *
 * The `client_secret` will be returned in the response and you will not be able to retrieve it later on.
 * Write the secret down and keep it somewhere safe.
 */
export const createOidcDynamicClient = <TComposable extends Composable, DefaultT extends CreateOidcDynamicClientResponse = CreateOidcDynamicClientResponse>(options: Options<TComposable, CreateOidcDynamicClientData, CreateOidcDynamicClientResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, CreateOidcDynamicClientResponse | DefaultT, CreateOidcDynamicClientError, DefaultT>({
        url: '/oauth2/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete OAuth 2.0 Client using the OpenID Dynamic Client Registration Management Protocol
 * This endpoint behaves like the administrative counterpart (`deleteOAuth2Client`) but is capable of facing the
 * public internet directly and can be used in self-service. It implements the OpenID Connect
 * Dynamic Client Registration Protocol. This feature needs to be enabled in the configuration. This endpoint
 * is disabled by default. It can be enabled by an administrator.
 *
 * To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client
 * uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query.
 * If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.
 *
 * OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
 * generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
 */
export const deleteOidcDynamicClient = <TComposable extends Composable, DefaultT extends DeleteOidcDynamicClientResponse = DeleteOidcDynamicClientResponse>(options: Options<TComposable, DeleteOidcDynamicClientData, DeleteOidcDynamicClientResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).delete<TComposable, DeleteOidcDynamicClientResponse | DefaultT, DeleteOidcDynamicClientError, DefaultT>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oauth2/register/{id}',
        ...options
    });
};

/**
 * Get OAuth2 Client using OpenID Dynamic Client Registration
 * This endpoint behaves like the administrative counterpart (`getOAuth2Client`) but is capable of facing the
 * public internet directly and can be used in self-service. It implements the OpenID Connect
 * Dynamic Client Registration Protocol.
 *
 * To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client
 * uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query.
 * If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.
 */
export const getOidcDynamicClient = <TComposable extends Composable, DefaultT extends GetOidcDynamicClientResponse = GetOidcDynamicClientResponse>(options: Options<TComposable, GetOidcDynamicClientData, GetOidcDynamicClientResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetOidcDynamicClientResponse | DefaultT, GetOidcDynamicClientError, DefaultT>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oauth2/register/{id}',
        ...options
    });
};

/**
 * Set OAuth2 Client using OpenID Dynamic Client Registration
 * This endpoint behaves like the administrative counterpart (`setOAuth2Client`) but is capable of facing the
 * public internet directly to be used by third parties. It implements the OpenID Connect
 * Dynamic Client Registration Protocol.
 *
 * This feature is disabled per default. It can be enabled by a system administrator.
 *
 * If you pass `client_secret` the secret is used, otherwise the existing secret is used. If set, the secret is echoed in the response.
 * It is not possible to retrieve it later on.
 *
 * To use this endpoint, you will need to present the client's authentication credentials. If the OAuth2 Client
 * uses the Token Endpoint Authentication Method `client_secret_post`, you need to present the client secret in the URL query.
 * If it uses `client_secret_basic`, present the Client ID and the Client Secret in the Authorization header.
 *
 * OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are
 * generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities.
 */
export const setOidcDynamicClient = <TComposable extends Composable, DefaultT extends SetOidcDynamicClientResponse = SetOidcDynamicClientResponse>(options: Options<TComposable, SetOidcDynamicClientData, SetOidcDynamicClientResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).put<TComposable, SetOidcDynamicClientResponse | DefaultT, SetOidcDynamicClientError, DefaultT>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oauth2/register/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Revoke OAuth 2.0 Access or Refresh Token
 * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no
 * longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token.
 * Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by
 * the client the token was generated for.
 */
export const revokeOAuth2Token = <TComposable extends Composable, DefaultT = undefined>(options: Options<TComposable, RevokeOAuth2TokenData, unknown, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, RevokeOAuth2TokenError, DefaultT>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oauth2/revoke',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * OpenID Connect Front- and Back-channel Enabled Logout
 * This endpoint initiates and completes user logout at the Ory OAuth2 & OpenID provider and initiates OpenID Connect Front- / Back-channel logout:
 *
 * https://openid.net/specs/openid-connect-frontchannel-1_0.html
 * https://openid.net/specs/openid-connect-backchannel-1_0.html
 *
 * Back-channel logout is performed asynchronously and does not affect logout flow.
 */
export const revokeOidcSession = <TComposable extends Composable, DefaultT = undefined>(options: Options<TComposable, RevokeOidcSessionData, unknown, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, unknown | DefaultT, unknown, DefaultT>({
        url: '/oauth2/sessions/logout',
        ...options
    });
};

/**
 * The OAuth 2.0 Token Endpoint
 * Use open source libraries to perform OAuth 2.0 and OpenID Connect
 * available for any programming language. You can find a list of libraries here https://oauth.net/code/
 *
 * This endpoint should not be used via the Ory SDK and is only included for technical reasons.
 * Instead, use one of the libraries linked above.
 */
export const oauth2TokenExchange = <TComposable extends Composable, DefaultT extends Oauth2TokenExchangeResponse = Oauth2TokenExchangeResponse>(options: Options<TComposable, Oauth2TokenExchangeData, Oauth2TokenExchangeResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, Oauth2TokenExchangeResponse | DefaultT, Oauth2TokenExchangeError, DefaultT>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/oauth2/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * OpenID Connect Userinfo
 * This endpoint returns the payload of the ID Token, including `session.id_token` values, of
 * the provided OAuth 2.0 Access Token's consent request.
 *
 * In the case of authentication error, a WWW-Authenticate header might be set in the response
 * with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3)
 * for more details about header format.
 */
export const getOidcUserInfo = <TComposable extends Composable, DefaultT extends GetOidcUserInfoResponse = GetOidcUserInfoResponse>(options: Options<TComposable, GetOidcUserInfoData, GetOidcUserInfoResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetOidcUserInfoResponse | DefaultT, GetOidcUserInfoError, DefaultT>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/userinfo',
        ...options
    });
};

/**
 * Return Running Software Version.
 * This endpoint returns the version of Ory Hydra.
 *
 * If the service supports TLS Edge Termination, this endpoint does not require the
 * `X-Forwarded-Proto` header to be set.
 *
 * Be aware that if you are running multiple nodes of this service, the version will never
 * refer to the cluster state, only to a single instance.
 */
export const getVersion = <TComposable extends Composable, DefaultT extends GetVersionResponse = GetVersionResponse>(options: Options<TComposable, GetVersionData, GetVersionResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetVersionResponse | DefaultT, unknown, DefaultT>({
        url: '/version',
        ...options
    });
};